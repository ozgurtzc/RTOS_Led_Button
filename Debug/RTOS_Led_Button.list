
RTOS_Led_Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08001c20  08001c20  00011c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001c50  08001c50  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08001c50  08001c50  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001c50  08001c50  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001c50  08001c50  00011c50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001c54  08001c54  00011c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08001c58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d44  20000018  08001c70  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d5c  08001c70  00022d5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000073ff  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001286  00000000  00000000  00027447  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000006e0  00000000  00000000  000286d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000648  00000000  00000000  00028db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00011cd2  00000000  00000000  000293f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000059d7  00000000  00000000  0003b0ca  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006c13b  00000000  00000000  00040aa1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000acbdc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001c84  00000000  00000000  000acc58  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000018 	.word	0x20000018
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001c08 	.word	0x08001c08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000001c 	.word	0x2000001c
 80001cc:	08001c08 	.word	0x08001c08

080001d0 <main>:
void button_task_handler(void *params);

uint8_t button_status_flag = NOT_PRESSED;

int main(void)
{
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b082      	sub	sp, #8
 80001d4:	af02      	add	r7, sp, #8
	RCC_DeInit();
 80001d6:	f000 faa1 	bl	800071c <RCC_DeInit>

	SystemCoreClockUpdate();
 80001da:	f000 f8f3 	bl	80003c4 <SystemCoreClockUpdate>

	prvSetupHardware();
 80001de:	f000 f8d3 	bl	8000388 <prvSetupHardware>

	xTaskCreate(led_task_handler, "LED-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80001e2:	2300      	movs	r3, #0
 80001e4:	9301      	str	r3, [sp, #4]
 80001e6:	2301      	movs	r3, #1
 80001e8:	9300      	str	r3, [sp, #0]
 80001ea:	2300      	movs	r3, #0
 80001ec:	2282      	movs	r2, #130	; 0x82
 80001ee:	4908      	ldr	r1, [pc, #32]	; (8000210 <main+0x40>)
 80001f0:	4808      	ldr	r0, [pc, #32]	; (8000214 <main+0x44>)
 80001f2:	f000 fd08 	bl	8000c06 <xTaskCreate>
	xTaskCreate(button_task_handler, "BUTTON-TASK", configMINIMAL_STACK_SIZE, NULL, 1, NULL);
 80001f6:	2300      	movs	r3, #0
 80001f8:	9301      	str	r3, [sp, #4]
 80001fa:	2301      	movs	r3, #1
 80001fc:	9300      	str	r3, [sp, #0]
 80001fe:	2300      	movs	r3, #0
 8000200:	2282      	movs	r2, #130	; 0x82
 8000202:	4905      	ldr	r1, [pc, #20]	; (8000218 <main+0x48>)
 8000204:	4805      	ldr	r0, [pc, #20]	; (800021c <main+0x4c>)
 8000206:	f000 fcfe 	bl	8000c06 <xTaskCreate>

	vTaskStartScheduler();
 800020a:	f000 fe3f 	bl	8000e8c <vTaskStartScheduler>

	for(;;);
 800020e:	e7fe      	b.n	800020e <main+0x3e>
 8000210:	08001c20 	.word	0x08001c20
 8000214:	08000221 	.word	0x08000221
 8000218:	08001c2c 	.word	0x08001c2c
 800021c:	08000255 	.word	0x08000255

08000220 <led_task_handler>:

}

void led_task_handler(void *params)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(button_status_flag == PRESSED)
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <led_task_handler+0x2c>)
 800022a:	781b      	ldrb	r3, [r3, #0]
 800022c:	2b01      	cmp	r3, #1
 800022e:	d106      	bne.n	800023e <led_task_handler+0x1e>
		{
			GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_SET);
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000236:	4806      	ldr	r0, [pc, #24]	; (8000250 <led_task_handler+0x30>)
 8000238:	f000 fa0f 	bl	800065a <GPIO_WriteBit>
 800023c:	e7f4      	b.n	8000228 <led_task_handler+0x8>
		}
		else
		{
			GPIO_WriteBit(GPIOD, GPIO_Pin_15, Bit_RESET);
 800023e:	2200      	movs	r2, #0
 8000240:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000244:	4802      	ldr	r0, [pc, #8]	; (8000250 <led_task_handler+0x30>)
 8000246:	f000 fa08 	bl	800065a <GPIO_WriteBit>
		if(button_status_flag == PRESSED)
 800024a:	e7ed      	b.n	8000228 <led_task_handler+0x8>
 800024c:	20000034 	.word	0x20000034
 8000250:	40020c00 	.word	0x40020c00

08000254 <button_task_handler>:
		}
	}
}

void button_task_handler(void *params)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
	while(1)
	{
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 800025c:	2101      	movs	r1, #1
 800025e:	4807      	ldr	r0, [pc, #28]	; (800027c <button_task_handler+0x28>)
 8000260:	f000 f9e1 	bl	8000626 <GPIO_ReadInputDataBit>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d003      	beq.n	8000272 <button_task_handler+0x1e>
		{
			button_status_flag = PRESSED;
 800026a:	4b05      	ldr	r3, [pc, #20]	; (8000280 <button_task_handler+0x2c>)
 800026c:	2201      	movs	r2, #1
 800026e:	701a      	strb	r2, [r3, #0]
 8000270:	e7f4      	b.n	800025c <button_task_handler+0x8>
		}
		else
		{
			button_status_flag = NOT_PRESSED;
 8000272:	4b03      	ldr	r3, [pc, #12]	; (8000280 <button_task_handler+0x2c>)
 8000274:	2200      	movs	r2, #0
 8000276:	701a      	strb	r2, [r3, #0]
		if(GPIO_ReadInputDataBit(GPIOA, GPIO_Pin_0))
 8000278:	e7f0      	b.n	800025c <button_task_handler+0x8>
 800027a:	bf00      	nop
 800027c:	40020000 	.word	0x40020000
 8000280:	20000034 	.word	0x20000034

08000284 <prvSetupUart>:
		}
	}
}

static void prvSetupUart(void)
{
 8000284:	b580      	push	{r7, lr}
 8000286:	b086      	sub	sp, #24
 8000288:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_UART_Pin;
	USART_InitTypeDef UART2_Init;

	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 800028a:	2101      	movs	r1, #1
 800028c:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000290:	f000 fb44 	bl	800091c <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8000294:	2101      	movs	r1, #1
 8000296:	2001      	movs	r0, #1
 8000298:	f000 fb20 	bl	80008dc <RCC_AHB1PeriphClockCmd>

	memset(&GPIO_UART_Pin, 0, sizeof(GPIO_UART_Pin));
 800029c:	f107 0310 	add.w	r3, r7, #16
 80002a0:	2208      	movs	r2, #8
 80002a2:	2100      	movs	r1, #0
 80002a4:	4618      	mov	r0, r3
 80002a6:	f001 fca7 	bl	8001bf8 <memset>

	GPIO_UART_Pin.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 80002aa:	230c      	movs	r3, #12
 80002ac:	613b      	str	r3, [r7, #16]
	GPIO_UART_Pin.GPIO_Mode = GPIO_Mode_AF;
 80002ae:	2302      	movs	r3, #2
 80002b0:	753b      	strb	r3, [r7, #20]
	GPIO_UART_Pin.GPIO_PuPd = GPIO_PuPd_UP;
 80002b2:	2301      	movs	r3, #1
 80002b4:	75fb      	strb	r3, [r7, #23]
	GPIO_Init(GPIOA, &GPIO_UART_Pin);
 80002b6:	f107 0310 	add.w	r3, r7, #16
 80002ba:	4619      	mov	r1, r3
 80002bc:	4816      	ldr	r0, [pc, #88]	; (8000318 <prvSetupUart+0x94>)
 80002be:	f000 f924 	bl	800050a <GPIO_Init>

	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 80002c2:	2207      	movs	r2, #7
 80002c4:	2102      	movs	r1, #2
 80002c6:	4814      	ldr	r0, [pc, #80]	; (8000318 <prvSetupUart+0x94>)
 80002c8:	f000 f9df 	bl	800068a <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 80002cc:	2207      	movs	r2, #7
 80002ce:	2103      	movs	r1, #3
 80002d0:	4811      	ldr	r0, [pc, #68]	; (8000318 <prvSetupUart+0x94>)
 80002d2:	f000 f9da 	bl	800068a <GPIO_PinAFConfig>

	memset(&UART2_Init, 0, sizeof(UART2_Init));
 80002d6:	463b      	mov	r3, r7
 80002d8:	2210      	movs	r2, #16
 80002da:	2100      	movs	r1, #0
 80002dc:	4618      	mov	r0, r3
 80002de:	f001 fc8b 	bl	8001bf8 <memset>

	UART2_Init.USART_BaudRate = 115200;
 80002e2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80002e6:	603b      	str	r3, [r7, #0]
	UART2_Init.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 80002e8:	2300      	movs	r3, #0
 80002ea:	81bb      	strh	r3, [r7, #12]
	UART2_Init.USART_Mode = USART_Mode_Tx | USART_Mode_Rx;
 80002ec:	230c      	movs	r3, #12
 80002ee:	817b      	strh	r3, [r7, #10]
	UART2_Init.USART_Parity = USART_Parity_No;
 80002f0:	2300      	movs	r3, #0
 80002f2:	813b      	strh	r3, [r7, #8]
	UART2_Init.USART_StopBits = USART_StopBits_1;
 80002f4:	2300      	movs	r3, #0
 80002f6:	80fb      	strh	r3, [r7, #6]
	UART2_Init.USART_WordLength = USART_WordLength_8b;
 80002f8:	2300      	movs	r3, #0
 80002fa:	80bb      	strh	r3, [r7, #4]
	USART_Init(USART2, &UART2_Init);
 80002fc:	463b      	mov	r3, r7
 80002fe:	4619      	mov	r1, r3
 8000300:	4806      	ldr	r0, [pc, #24]	; (800031c <prvSetupUart+0x98>)
 8000302:	f000 fb2b 	bl	800095c <USART_Init>

	USART_Cmd(USART2, ENABLE);
 8000306:	2101      	movs	r1, #1
 8000308:	4804      	ldr	r0, [pc, #16]	; (800031c <prvSetupUart+0x98>)
 800030a:	f000 fbe1 	bl	8000ad0 <USART_Cmd>
}
 800030e:	bf00      	nop
 8000310:	3718      	adds	r7, #24
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	40020000 	.word	0x40020000
 800031c:	40004400 	.word	0x40004400

08000320 <prvSetupGPIO>:

void prvSetupGPIO(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	b084      	sub	sp, #16
 8000324:	af00      	add	r7, sp, #0
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOD, ENABLE);
 8000326:	2101      	movs	r1, #1
 8000328:	2008      	movs	r0, #8
 800032a:	f000 fad7 	bl	80008dc <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 800032e:	2101      	movs	r1, #1
 8000330:	2001      	movs	r0, #1
 8000332:	f000 fad3 	bl	80008dc <RCC_AHB1PeriphClockCmd>

	GPIO_InitTypeDef LedInit, ButtonInit;
	LedInit.GPIO_Mode = GPIO_Mode_OUT;
 8000336:	2301      	movs	r3, #1
 8000338:	733b      	strb	r3, [r7, #12]
	LedInit.GPIO_OType = GPIO_OType_PP;
 800033a:	2300      	movs	r3, #0
 800033c:	73bb      	strb	r3, [r7, #14]
	LedInit.GPIO_Pin = GPIO_Pin_15;
 800033e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000342:	60bb      	str	r3, [r7, #8]
	LedInit.GPIO_Speed = GPIO_Low_Speed;
 8000344:	2300      	movs	r3, #0
 8000346:	737b      	strb	r3, [r7, #13]
	LedInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000348:	2300      	movs	r3, #0
 800034a:	73fb      	strb	r3, [r7, #15]
	GPIO_Init(GPIOD, &LedInit);
 800034c:	f107 0308 	add.w	r3, r7, #8
 8000350:	4619      	mov	r1, r3
 8000352:	480b      	ldr	r0, [pc, #44]	; (8000380 <prvSetupGPIO+0x60>)
 8000354:	f000 f8d9 	bl	800050a <GPIO_Init>

	ButtonInit.GPIO_Mode = GPIO_Mode_IN;
 8000358:	2300      	movs	r3, #0
 800035a:	713b      	strb	r3, [r7, #4]
	ButtonInit.GPIO_OType = GPIO_OType_PP;
 800035c:	2300      	movs	r3, #0
 800035e:	71bb      	strb	r3, [r7, #6]
	ButtonInit.GPIO_Pin = GPIO_Pin_0;
 8000360:	2301      	movs	r3, #1
 8000362:	603b      	str	r3, [r7, #0]
	ButtonInit.GPIO_Speed = GPIO_Low_Speed;
 8000364:	2300      	movs	r3, #0
 8000366:	717b      	strb	r3, [r7, #5]
	ButtonInit.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8000368:	2300      	movs	r3, #0
 800036a:	71fb      	strb	r3, [r7, #7]
	GPIO_Init(GPIOA, &ButtonInit);
 800036c:	463b      	mov	r3, r7
 800036e:	4619      	mov	r1, r3
 8000370:	4804      	ldr	r0, [pc, #16]	; (8000384 <prvSetupGPIO+0x64>)
 8000372:	f000 f8ca 	bl	800050a <GPIO_Init>
}
 8000376:	bf00      	nop
 8000378:	3710      	adds	r7, #16
 800037a:	46bd      	mov	sp, r7
 800037c:	bd80      	pop	{r7, pc}
 800037e:	bf00      	nop
 8000380:	40020c00 	.word	0x40020c00
 8000384:	40020000 	.word	0x40020000

08000388 <prvSetupHardware>:

static void prvSetupHardware(void)
{
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	prvSetupGPIO();
 800038c:	f7ff ffc8 	bl	8000320 <prvSetupGPIO>
	prvSetupUart();
 8000390:	f7ff ff78 	bl	8000284 <prvSetupUart>
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}

08000398 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000398:	b480      	push	{r7}
 800039a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800039c:	4b08      	ldr	r3, [pc, #32]	; (80003c0 <SystemInit+0x28>)
 800039e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a2:	4a07      	ldr	r2, [pc, #28]	; (80003c0 <SystemInit+0x28>)
 80003a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <SystemInit+0x28>)
 80003ae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003b2:	609a      	str	r2, [r3, #8]
#endif
}
 80003b4:	bf00      	nop
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	e000ed00 	.word	0xe000ed00

080003c4 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 80003ca:	2300      	movs	r3, #0
 80003cc:	613b      	str	r3, [r7, #16]
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	2302      	movs	r3, #2
 80003d4:	60fb      	str	r3, [r7, #12]
 80003d6:	2300      	movs	r3, #0
 80003d8:	60bb      	str	r3, [r7, #8]
 80003da:	2302      	movs	r3, #2
 80003dc:	607b      	str	r3, [r7, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80003de:	4b31      	ldr	r3, [pc, #196]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 80003e0:	689b      	ldr	r3, [r3, #8]
 80003e2:	f003 030c 	and.w	r3, r3, #12
 80003e6:	613b      	str	r3, [r7, #16]

  switch (tmp)
 80003e8:	693b      	ldr	r3, [r7, #16]
 80003ea:	2b04      	cmp	r3, #4
 80003ec:	d007      	beq.n	80003fe <SystemCoreClockUpdate+0x3a>
 80003ee:	2b08      	cmp	r3, #8
 80003f0:	d009      	beq.n	8000406 <SystemCoreClockUpdate+0x42>
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d13d      	bne.n	8000472 <SystemCoreClockUpdate+0xae>
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 80003f6:	4b2c      	ldr	r3, [pc, #176]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 80003f8:	4a2c      	ldr	r2, [pc, #176]	; (80004ac <SystemCoreClockUpdate+0xe8>)
 80003fa:	601a      	str	r2, [r3, #0]
      break;
 80003fc:	e03d      	b.n	800047a <SystemCoreClockUpdate+0xb6>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 80003fe:	4b2a      	ldr	r3, [pc, #168]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 8000400:	4a2b      	ldr	r2, [pc, #172]	; (80004b0 <SystemCoreClockUpdate+0xec>)
 8000402:	601a      	str	r2, [r3, #0]
      break;
 8000404:	e039      	b.n	800047a <SystemCoreClockUpdate+0xb6>
    case 0x08:  /* PLL used as system clock source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000406:	4b27      	ldr	r3, [pc, #156]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 8000408:	685b      	ldr	r3, [r3, #4]
 800040a:	0d9b      	lsrs	r3, r3, #22
 800040c:	f003 0301 	and.w	r3, r3, #1
 8000410:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000412:	4b24      	ldr	r3, [pc, #144]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 8000414:	685b      	ldr	r3, [r3, #4]
 8000416:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800041a:	607b      	str	r3, [r7, #4]
      
      if (pllsource != 0)
 800041c:	68bb      	ldr	r3, [r7, #8]
 800041e:	2b00      	cmp	r3, #0
 8000420:	d00c      	beq.n	800043c <SystemCoreClockUpdate+0x78>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000422:	4a23      	ldr	r2, [pc, #140]	; (80004b0 <SystemCoreClockUpdate+0xec>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	fbb2 f3f3 	udiv	r3, r2, r3
 800042a:	4a1e      	ldr	r2, [pc, #120]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 800042c:	6852      	ldr	r2, [r2, #4]
 800042e:	0992      	lsrs	r2, r2, #6
 8000430:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000434:	fb02 f303 	mul.w	r3, r2, r3
 8000438:	617b      	str	r3, [r7, #20]
 800043a:	e00b      	b.n	8000454 <SystemCoreClockUpdate+0x90>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800043c:	4a1b      	ldr	r2, [pc, #108]	; (80004ac <SystemCoreClockUpdate+0xe8>)
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	fbb2 f3f3 	udiv	r3, r2, r3
 8000444:	4a17      	ldr	r2, [pc, #92]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 8000446:	6852      	ldr	r2, [r2, #4]
 8000448:	0992      	lsrs	r2, r2, #6
 800044a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800044e:	fb02 f303 	mul.w	r3, r2, r3
 8000452:	617b      	str	r3, [r7, #20]
      }

      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000454:	4b13      	ldr	r3, [pc, #76]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 8000456:	685b      	ldr	r3, [r3, #4]
 8000458:	0c1b      	lsrs	r3, r3, #16
 800045a:	f003 0303 	and.w	r3, r3, #3
 800045e:	3301      	adds	r3, #1
 8000460:	005b      	lsls	r3, r3, #1
 8000462:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;
 8000464:	697a      	ldr	r2, [r7, #20]
 8000466:	68fb      	ldr	r3, [r7, #12]
 8000468:	fbb2 f3f3 	udiv	r3, r2, r3
 800046c:	4a0e      	ldr	r2, [pc, #56]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 800046e:	6013      	str	r3, [r2, #0]
      break;
 8000470:	e003      	b.n	800047a <SystemCoreClockUpdate+0xb6>
    default:
      SystemCoreClock = HSI_VALUE;
 8000472:	4b0d      	ldr	r3, [pc, #52]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 8000474:	4a0d      	ldr	r2, [pc, #52]	; (80004ac <SystemCoreClockUpdate+0xe8>)
 8000476:	601a      	str	r2, [r3, #0]
      break;
 8000478:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 800047a:	4b0a      	ldr	r3, [pc, #40]	; (80004a4 <SystemCoreClockUpdate+0xe0>)
 800047c:	689b      	ldr	r3, [r3, #8]
 800047e:	091b      	lsrs	r3, r3, #4
 8000480:	f003 030f 	and.w	r3, r3, #15
 8000484:	4a0b      	ldr	r2, [pc, #44]	; (80004b4 <SystemCoreClockUpdate+0xf0>)
 8000486:	5cd3      	ldrb	r3, [r2, r3]
 8000488:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 800048a:	4b07      	ldr	r3, [pc, #28]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 800048c:	681a      	ldr	r2, [r3, #0]
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	fa22 f303 	lsr.w	r3, r2, r3
 8000494:	4a04      	ldr	r2, [pc, #16]	; (80004a8 <SystemCoreClockUpdate+0xe4>)
 8000496:	6013      	str	r3, [r2, #0]
}
 8000498:	bf00      	nop
 800049a:	371c      	adds	r7, #28
 800049c:	46bd      	mov	sp, r7
 800049e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004a2:	4770      	bx	lr
 80004a4:	40023800 	.word	0x40023800
 80004a8:	20000000 	.word	0x20000000
 80004ac:	00f42400 	.word	0x00f42400
 80004b0:	017d7840 	.word	0x017d7840
 80004b4:	08001c40 	.word	0x08001c40

080004b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80004bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80004be:	e003      	b.n	80004c8 <LoopCopyDataInit>

080004c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80004c0:	4b0c      	ldr	r3, [pc, #48]	; (80004f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80004c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80004c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80004c6:	3104      	adds	r1, #4

080004c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80004c8:	480b      	ldr	r0, [pc, #44]	; (80004f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80004ca:	4b0c      	ldr	r3, [pc, #48]	; (80004fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80004cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80004ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80004d0:	d3f6      	bcc.n	80004c0 <CopyDataInit>
  ldr  r2, =_sbss
 80004d2:	4a0b      	ldr	r2, [pc, #44]	; (8000500 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80004d4:	e002      	b.n	80004dc <LoopFillZerobss>

080004d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80004d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80004d8:	f842 3b04 	str.w	r3, [r2], #4

080004dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80004dc:	4b09      	ldr	r3, [pc, #36]	; (8000504 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80004de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80004e0:	d3f9      	bcc.n	80004d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004e2:	f7ff ff59 	bl	8000398 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004e6:	f001 fb63 	bl	8001bb0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ea:	f7ff fe71 	bl	80001d0 <main>
  bx  lr    
 80004ee:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80004f4:	08001c58 	.word	0x08001c58
  ldr  r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80004fc:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 8000500:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 8000504:	20012d5c 	.word	0x20012d5c

08000508 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000508:	e7fe      	b.n	8000508 <ADC_IRQHandler>

0800050a <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 800050a:	b480      	push	{r7}
 800050c:	b087      	sub	sp, #28
 800050e:	af00      	add	r7, sp, #0
 8000510:	6078      	str	r0, [r7, #4]
 8000512:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	2300      	movs	r3, #0
 800051a:	613b      	str	r3, [r7, #16]
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 8000520:	2300      	movs	r3, #0
 8000522:	617b      	str	r3, [r7, #20]
 8000524:	e076      	b.n	8000614 <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 8000526:	2201      	movs	r2, #1
 8000528:	697b      	ldr	r3, [r7, #20]
 800052a:	fa02 f303 	lsl.w	r3, r2, r3
 800052e:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 8000530:	683b      	ldr	r3, [r7, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	693a      	ldr	r2, [r7, #16]
 8000536:	4013      	ands	r3, r2
 8000538:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 800053a:	68fa      	ldr	r2, [r7, #12]
 800053c:	693b      	ldr	r3, [r7, #16]
 800053e:	429a      	cmp	r2, r3
 8000540:	d165      	bne.n	800060e <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	697b      	ldr	r3, [r7, #20]
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	2103      	movs	r1, #3
 800054c:	fa01 f303 	lsl.w	r3, r1, r3
 8000550:	43db      	mvns	r3, r3
 8000552:	401a      	ands	r2, r3
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	683b      	ldr	r3, [r7, #0]
 800055e:	791b      	ldrb	r3, [r3, #4]
 8000560:	4619      	mov	r1, r3
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	005b      	lsls	r3, r3, #1
 8000566:	fa01 f303 	lsl.w	r3, r1, r3
 800056a:	431a      	orrs	r2, r3
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	791b      	ldrb	r3, [r3, #4]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d003      	beq.n	8000580 <GPIO_Init+0x76>
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	791b      	ldrb	r3, [r3, #4]
 800057c:	2b02      	cmp	r3, #2
 800057e:	d12e      	bne.n	80005de <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689a      	ldr	r2, [r3, #8]
 8000584:	697b      	ldr	r3, [r7, #20]
 8000586:	005b      	lsls	r3, r3, #1
 8000588:	2103      	movs	r1, #3
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	401a      	ands	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000596:	687b      	ldr	r3, [r7, #4]
 8000598:	689a      	ldr	r2, [r3, #8]
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	795b      	ldrb	r3, [r3, #5]
 800059e:	4619      	mov	r1, r3
 80005a0:	697b      	ldr	r3, [r7, #20]
 80005a2:	005b      	lsls	r3, r3, #1
 80005a4:	fa01 f303 	lsl.w	r3, r1, r3
 80005a8:	431a      	orrs	r2, r3
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	685a      	ldr	r2, [r3, #4]
 80005b2:	697b      	ldr	r3, [r7, #20]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	4619      	mov	r1, r3
 80005b8:	2301      	movs	r3, #1
 80005ba:	408b      	lsls	r3, r1
 80005bc:	43db      	mvns	r3, r3
 80005be:	401a      	ands	r2, r3
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	685b      	ldr	r3, [r3, #4]
 80005c8:	683a      	ldr	r2, [r7, #0]
 80005ca:	7992      	ldrb	r2, [r2, #6]
 80005cc:	4611      	mov	r1, r2
 80005ce:	697a      	ldr	r2, [r7, #20]
 80005d0:	b292      	uxth	r2, r2
 80005d2:	fa01 f202 	lsl.w	r2, r1, r2
 80005d6:	b292      	uxth	r2, r2
 80005d8:	431a      	orrs	r2, r3
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	68da      	ldr	r2, [r3, #12]
 80005e2:	697b      	ldr	r3, [r7, #20]
 80005e4:	b29b      	uxth	r3, r3
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2103      	movs	r1, #3
 80005ea:	fa01 f303 	lsl.w	r3, r1, r3
 80005ee:	43db      	mvns	r3, r3
 80005f0:	401a      	ands	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	68da      	ldr	r2, [r3, #12]
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	79db      	ldrb	r3, [r3, #7]
 80005fe:	4619      	mov	r1, r3
 8000600:	697b      	ldr	r3, [r7, #20]
 8000602:	005b      	lsls	r3, r3, #1
 8000604:	fa01 f303 	lsl.w	r3, r1, r3
 8000608:	431a      	orrs	r2, r3
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 800060e:	697b      	ldr	r3, [r7, #20]
 8000610:	3301      	adds	r3, #1
 8000612:	617b      	str	r3, [r7, #20]
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2b0f      	cmp	r3, #15
 8000618:	d985      	bls.n	8000526 <GPIO_Init+0x1c>
    }
  }
}
 800061a:	bf00      	nop
 800061c:	371c      	adds	r7, #28
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr

08000626 <GPIO_ReadInputDataBit>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
uint8_t GPIO_ReadInputDataBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000626:	b480      	push	{r7}
 8000628:	b085      	sub	sp, #20
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	807b      	strh	r3, [r7, #2]
  uint8_t bitstatus = 0x00;
 8000632:	2300      	movs	r3, #0
 8000634:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)Bit_RESET)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	691a      	ldr	r2, [r3, #16]
 800063a:	887b      	ldrh	r3, [r7, #2]
 800063c:	4013      	ands	r3, r2
 800063e:	2b00      	cmp	r3, #0
 8000640:	d002      	beq.n	8000648 <GPIO_ReadInputDataBit+0x22>
  {
    bitstatus = (uint8_t)Bit_SET;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e001      	b.n	800064c <GPIO_ReadInputDataBit+0x26>
  }
  else
  {
    bitstatus = (uint8_t)Bit_RESET;
 8000648:	2300      	movs	r3, #0
 800064a:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3714      	adds	r7, #20
 8000652:	46bd      	mov	sp, r7
 8000654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000658:	4770      	bx	lr

0800065a <GPIO_WriteBit>:
  *            @arg Bit_RESET: to clear the port pin
  *            @arg Bit_SET: to set the port pin
  * @retval None
  */
void GPIO_WriteBit(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, BitAction BitVal)
{
 800065a:	b480      	push	{r7}
 800065c:	b083      	sub	sp, #12
 800065e:	af00      	add	r7, sp, #0
 8000660:	6078      	str	r0, [r7, #4]
 8000662:	460b      	mov	r3, r1
 8000664:	807b      	strh	r3, [r7, #2]
 8000666:	4613      	mov	r3, r2
 8000668:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GET_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_BIT_ACTION(BitVal));

  if (BitVal != Bit_RESET)
 800066a:	787b      	ldrb	r3, [r7, #1]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d003      	beq.n	8000678 <GPIO_WriteBit+0x1e>
  {
    GPIOx->BSRRL = GPIO_Pin;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	887a      	ldrh	r2, [r7, #2]
 8000674:	831a      	strh	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRRH = GPIO_Pin ;
  }
}
 8000676:	e002      	b.n	800067e <GPIO_WriteBit+0x24>
    GPIOx->BSRRH = GPIO_Pin ;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	887a      	ldrh	r2, [r7, #2]
 800067c:	835a      	strh	r2, [r3, #26]
}
 800067e:	bf00      	nop
 8000680:	370c      	adds	r7, #12
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 800068a:	b480      	push	{r7}
 800068c:	b085      	sub	sp, #20
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	460b      	mov	r3, r1
 8000694:	807b      	strh	r3, [r7, #2]
 8000696:	4613      	mov	r3, r2
 8000698:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 800069e:	2300      	movs	r3, #0
 80006a0:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006a2:	787a      	ldrb	r2, [r7, #1]
 80006a4:	887b      	ldrh	r3, [r7, #2]
 80006a6:	f003 0307 	and.w	r3, r3, #7
 80006aa:	009b      	lsls	r3, r3, #2
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80006b2:	887b      	ldrh	r3, [r7, #2]
 80006b4:	08db      	lsrs	r3, r3, #3
 80006b6:	b29b      	uxth	r3, r3
 80006b8:	461a      	mov	r2, r3
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	3208      	adds	r2, #8
 80006be:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80006c2:	887b      	ldrh	r3, [r7, #2]
 80006c4:	f003 0307 	and.w	r3, r3, #7
 80006c8:	009b      	lsls	r3, r3, #2
 80006ca:	210f      	movs	r1, #15
 80006cc:	fa01 f303 	lsl.w	r3, r1, r3
 80006d0:	43db      	mvns	r3, r3
 80006d2:	8879      	ldrh	r1, [r7, #2]
 80006d4:	08c9      	lsrs	r1, r1, #3
 80006d6:	b289      	uxth	r1, r1
 80006d8:	4608      	mov	r0, r1
 80006da:	ea02 0103 	and.w	r1, r2, r3
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	f100 0208 	add.w	r2, r0, #8
 80006e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 80006e8:	887b      	ldrh	r3, [r7, #2]
 80006ea:	08db      	lsrs	r3, r3, #3
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	461a      	mov	r2, r3
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	3208      	adds	r2, #8
 80006f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006f8:	68fa      	ldr	r2, [r7, #12]
 80006fa:	4313      	orrs	r3, r2
 80006fc:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 80006fe:	887b      	ldrh	r3, [r7, #2]
 8000700:	08db      	lsrs	r3, r3, #3
 8000702:	b29b      	uxth	r3, r3
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	3208      	adds	r2, #8
 800070a:	68b9      	ldr	r1, [r7, #8]
 800070c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr

0800071c <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000720:	4b16      	ldr	r3, [pc, #88]	; (800077c <RCC_DeInit+0x60>)
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a15      	ldr	r2, [pc, #84]	; (800077c <RCC_DeInit+0x60>)
 8000726:	f043 0301 	orr.w	r3, r3, #1
 800072a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800072c:	4b13      	ldr	r3, [pc, #76]	; (800077c <RCC_DeInit+0x60>)
 800072e:	2200      	movs	r2, #0
 8000730:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 8000732:	4b12      	ldr	r3, [pc, #72]	; (800077c <RCC_DeInit+0x60>)
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	4a11      	ldr	r2, [pc, #68]	; (800077c <RCC_DeInit+0x60>)
 8000738:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 800073c:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000740:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <RCC_DeInit+0x60>)
 8000744:	4a0e      	ldr	r2, [pc, #56]	; (8000780 <RCC_DeInit+0x64>)
 8000746:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <RCC_DeInit+0x60>)
 800074a:	4a0e      	ldr	r2, [pc, #56]	; (8000784 <RCC_DeInit+0x68>)
 800074c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <RCC_DeInit+0x60>)
 8000752:	4a0d      	ldr	r2, [pc, #52]	; (8000788 <RCC_DeInit+0x6c>)
 8000754:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000758:	4b08      	ldr	r3, [pc, #32]	; (800077c <RCC_DeInit+0x60>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a07      	ldr	r2, [pc, #28]	; (800077c <RCC_DeInit+0x60>)
 800075e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000762:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000764:	4b05      	ldr	r3, [pc, #20]	; (800077c <RCC_DeInit+0x60>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 800076a:	4b04      	ldr	r3, [pc, #16]	; (800077c <RCC_DeInit+0x60>)
 800076c:	2200      	movs	r2, #0
 800076e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 8000772:	bf00      	nop
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	40023800 	.word	0x40023800
 8000780:	24003010 	.word	0x24003010
 8000784:	20003000 	.word	0x20003000
 8000788:	24003000 	.word	0x24003000

0800078c <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 800078c:	b480      	push	{r7}
 800078e:	b089      	sub	sp, #36	; 0x24
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000794:	2300      	movs	r3, #0
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
 80007a0:	2302      	movs	r3, #2
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
 80007a8:	2302      	movs	r3, #2
 80007aa:	60bb      	str	r3, [r7, #8]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007ac:	4b47      	ldr	r3, [pc, #284]	; (80008cc <RCC_GetClocksFreq+0x140>)
 80007ae:	689b      	ldr	r3, [r3, #8]
 80007b0:	f003 030c 	and.w	r3, r3, #12
 80007b4:	61bb      	str	r3, [r7, #24]
  
  switch (tmp)
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	2b04      	cmp	r3, #4
 80007ba:	d007      	beq.n	80007cc <RCC_GetClocksFreq+0x40>
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d009      	beq.n	80007d4 <RCC_GetClocksFreq+0x48>
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d13d      	bne.n	8000840 <RCC_GetClocksFreq+0xb4>
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <RCC_GetClocksFreq+0x144>)
 80007c8:	601a      	str	r2, [r3, #0]
    break;
 80007ca:	e03d      	b.n	8000848 <RCC_GetClocksFreq+0xbc>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4a41      	ldr	r2, [pc, #260]	; (80008d4 <RCC_GetClocksFreq+0x148>)
 80007d0:	601a      	str	r2, [r3, #0]
    break;
 80007d2:	e039      	b.n	8000848 <RCC_GetClocksFreq+0xbc>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <RCC_GetClocksFreq+0x140>)
 80007d6:	685b      	ldr	r3, [r3, #4]
 80007d8:	0d9b      	lsrs	r3, r3, #22
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	60fb      	str	r3, [r7, #12]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80007e0:	4b3a      	ldr	r3, [pc, #232]	; (80008cc <RCC_GetClocksFreq+0x140>)
 80007e2:	685b      	ldr	r3, [r3, #4]
 80007e4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80007e8:	60bb      	str	r3, [r7, #8]
    
    if (pllsource != 0)
 80007ea:	68fb      	ldr	r3, [r7, #12]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d00c      	beq.n	800080a <RCC_GetClocksFreq+0x7e>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 80007f0:	4a38      	ldr	r2, [pc, #224]	; (80008d4 <RCC_GetClocksFreq+0x148>)
 80007f2:	68bb      	ldr	r3, [r7, #8]
 80007f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80007f8:	4a34      	ldr	r2, [pc, #208]	; (80008cc <RCC_GetClocksFreq+0x140>)
 80007fa:	6852      	ldr	r2, [r2, #4]
 80007fc:	0992      	lsrs	r2, r2, #6
 80007fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	61fb      	str	r3, [r7, #28]
 8000808:	e00b      	b.n	8000822 <RCC_GetClocksFreq+0x96>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 800080a:	4a31      	ldr	r2, [pc, #196]	; (80008d0 <RCC_GetClocksFreq+0x144>)
 800080c:	68bb      	ldr	r3, [r7, #8]
 800080e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000812:	4a2e      	ldr	r2, [pc, #184]	; (80008cc <RCC_GetClocksFreq+0x140>)
 8000814:	6852      	ldr	r2, [r2, #4]
 8000816:	0992      	lsrs	r2, r2, #6
 8000818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800081c:	fb02 f303 	mul.w	r3, r2, r3
 8000820:	61fb      	str	r3, [r7, #28]
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8000822:	4b2a      	ldr	r3, [pc, #168]	; (80008cc <RCC_GetClocksFreq+0x140>)
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	0c1b      	lsrs	r3, r3, #16
 8000828:	f003 0303 	and.w	r3, r3, #3
 800082c:	3301      	adds	r3, #1
 800082e:	005b      	lsls	r3, r3, #1
 8000830:	613b      	str	r3, [r7, #16]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 8000832:	69fa      	ldr	r2, [r7, #28]
 8000834:	693b      	ldr	r3, [r7, #16]
 8000836:	fbb2 f2f3 	udiv	r2, r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	601a      	str	r2, [r3, #0]
    break;
 800083e:	e003      	b.n	8000848 <RCC_GetClocksFreq+0xbc>
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
    break;
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	4a23      	ldr	r2, [pc, #140]	; (80008d0 <RCC_GetClocksFreq+0x144>)
 8000844:	601a      	str	r2, [r3, #0]
    break;
 8000846:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 8000848:	4b20      	ldr	r3, [pc, #128]	; (80008cc <RCC_GetClocksFreq+0x140>)
 800084a:	689b      	ldr	r3, [r3, #8]
 800084c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000850:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 4;
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	091b      	lsrs	r3, r3, #4
 8000856:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000858:	4a1f      	ldr	r2, [pc, #124]	; (80008d8 <RCC_GetClocksFreq+0x14c>)
 800085a:	69bb      	ldr	r3, [r7, #24]
 800085c:	4413      	add	r3, r2
 800085e:	781b      	ldrb	r3, [r3, #0]
 8000860:	b2db      	uxtb	r3, r3
 8000862:	617b      	str	r3, [r7, #20]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	681a      	ldr	r2, [r3, #0]
 8000868:	697b      	ldr	r3, [r7, #20]
 800086a:	40da      	lsrs	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000870:	4b16      	ldr	r3, [pc, #88]	; (80008cc <RCC_GetClocksFreq+0x140>)
 8000872:	689b      	ldr	r3, [r3, #8]
 8000874:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000878:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 10;
 800087a:	69bb      	ldr	r3, [r7, #24]
 800087c:	0a9b      	lsrs	r3, r3, #10
 800087e:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 8000880:	4a15      	ldr	r2, [pc, #84]	; (80008d8 <RCC_GetClocksFreq+0x14c>)
 8000882:	69bb      	ldr	r3, [r7, #24]
 8000884:	4413      	add	r3, r2
 8000886:	781b      	ldrb	r3, [r3, #0]
 8000888:	b2db      	uxtb	r3, r3
 800088a:	617b      	str	r3, [r7, #20]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	685a      	ldr	r2, [r3, #4]
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	40da      	lsrs	r2, r3
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000898:	4b0c      	ldr	r3, [pc, #48]	; (80008cc <RCC_GetClocksFreq+0x140>)
 800089a:	689b      	ldr	r3, [r3, #8]
 800089c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80008a0:	61bb      	str	r3, [r7, #24]
  tmp = tmp >> 13;
 80008a2:	69bb      	ldr	r3, [r7, #24]
 80008a4:	0b5b      	lsrs	r3, r3, #13
 80008a6:	61bb      	str	r3, [r7, #24]
  presc = APBAHBPrescTable[tmp];
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <RCC_GetClocksFreq+0x14c>)
 80008aa:	69bb      	ldr	r3, [r7, #24]
 80008ac:	4413      	add	r3, r2
 80008ae:	781b      	ldrb	r3, [r3, #0]
 80008b0:	b2db      	uxtb	r3, r3
 80008b2:	617b      	str	r3, [r7, #20]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	685a      	ldr	r2, [r3, #4]
 80008b8:	697b      	ldr	r3, [r7, #20]
 80008ba:	40da      	lsrs	r2, r3
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	60da      	str	r2, [r3, #12]
}
 80008c0:	bf00      	nop
 80008c2:	3724      	adds	r7, #36	; 0x24
 80008c4:	46bd      	mov	sp, r7
 80008c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ca:	4770      	bx	lr
 80008cc:	40023800 	.word	0x40023800
 80008d0:	00f42400 	.word	0x00f42400
 80008d4:	017d7840 	.word	0x017d7840
 80008d8:	20000004 	.word	0x20000004

080008dc <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
 80008e4:	460b      	mov	r3, r1
 80008e6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 80008e8:	78fb      	ldrb	r3, [r7, #3]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d006      	beq.n	80008fc <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 80008ee:	4b0a      	ldr	r3, [pc, #40]	; (8000918 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80008f2:	4909      	ldr	r1, [pc, #36]	; (8000918 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	4313      	orrs	r3, r2
 80008f8:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 80008fa:	e006      	b.n	800090a <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 80008fc:	4b06      	ldr	r3, [pc, #24]	; (8000918 <RCC_AHB1PeriphClockCmd+0x3c>)
 80008fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	43db      	mvns	r3, r3
 8000904:	4904      	ldr	r1, [pc, #16]	; (8000918 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000906:	4013      	ands	r3, r2
 8000908:	630b      	str	r3, [r1, #48]	; 0x30
}
 800090a:	bf00      	nop
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800

0800091c <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 800091c:	b480      	push	{r7}
 800091e:	b083      	sub	sp, #12
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
 8000924:	460b      	mov	r3, r1
 8000926:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000928:	78fb      	ldrb	r3, [r7, #3]
 800092a:	2b00      	cmp	r3, #0
 800092c:	d006      	beq.n	800093c <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 800092e:	4b0a      	ldr	r3, [pc, #40]	; (8000958 <RCC_APB1PeriphClockCmd+0x3c>)
 8000930:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000932:	4909      	ldr	r1, [pc, #36]	; (8000958 <RCC_APB1PeriphClockCmd+0x3c>)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4313      	orrs	r3, r2
 8000938:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 800093a:	e006      	b.n	800094a <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 800093c:	4b06      	ldr	r3, [pc, #24]	; (8000958 <RCC_APB1PeriphClockCmd+0x3c>)
 800093e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	43db      	mvns	r3, r3
 8000944:	4904      	ldr	r1, [pc, #16]	; (8000958 <RCC_APB1PeriphClockCmd+0x3c>)
 8000946:	4013      	ands	r3, r2
 8000948:	640b      	str	r3, [r1, #64]	; 0x40
}
 800094a:	bf00      	nop
 800094c:	370c      	adds	r7, #12
 800094e:	46bd      	mov	sp, r7
 8000950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	40023800 	.word	0x40023800

0800095c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b08a      	sub	sp, #40	; 0x28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
 800096a:	2300      	movs	r3, #0
 800096c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000972:	2300      	movs	r3, #0
 8000974:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	8a1b      	ldrh	r3, [r3, #16]
 800097a:	b29b      	uxth	r3, r3
 800097c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 800097e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000980:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000984:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000986:	683b      	ldr	r3, [r7, #0]
 8000988:	88db      	ldrh	r3, [r3, #6]
 800098a:	461a      	mov	r2, r3
 800098c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800098e:	4313      	orrs	r3, r2
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000994:	b29a      	uxth	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	899b      	ldrh	r3, [r3, #12]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 80009a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a4:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80009a8:	f023 030c 	bic.w	r3, r3, #12
 80009ac:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	889a      	ldrh	r2, [r3, #4]
 80009b2:	683b      	ldr	r3, [r7, #0]
 80009b4:	891b      	ldrh	r3, [r3, #8]
 80009b6:	4313      	orrs	r3, r2
 80009b8:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 80009be:	4313      	orrs	r3, r2
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	461a      	mov	r2, r3
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	4313      	orrs	r3, r2
 80009c8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	b29a      	uxth	r2, r3
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	8a9b      	ldrh	r3, [r3, #20]
 80009d6:	b29b      	uxth	r3, r3
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 80009da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	899b      	ldrh	r3, [r3, #12]
 80009e6:	461a      	mov	r2, r3
 80009e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ea:	4313      	orrs	r3, r2
 80009ec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 80009ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009f0:	b29a      	uxth	r2, r3
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 80009f6:	f107 0308 	add.w	r3, r7, #8
 80009fa:	4618      	mov	r0, r3
 80009fc:	f7ff fec6 	bl	800078c <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a30      	ldr	r2, [pc, #192]	; (8000ac4 <USART_Init+0x168>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d003      	beq.n	8000a10 <USART_Init+0xb4>
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	4a2f      	ldr	r2, [pc, #188]	; (8000ac8 <USART_Init+0x16c>)
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	d102      	bne.n	8000a16 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	623b      	str	r3, [r7, #32]
 8000a14:	e001      	b.n	8000a1a <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000a16:	693b      	ldr	r3, [r7, #16]
 8000a18:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	899b      	ldrh	r3, [r3, #12]
 8000a1e:	b29b      	uxth	r3, r3
 8000a20:	b21b      	sxth	r3, r3
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	da0c      	bge.n	8000a40 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000a26:	6a3a      	ldr	r2, [r7, #32]
 8000a28:	4613      	mov	r3, r2
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	4413      	add	r3, r2
 8000a2e:	009a      	lsls	r2, r3, #2
 8000a30:	441a      	add	r2, r3
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a3c:	61fb      	str	r3, [r7, #28]
 8000a3e:	e00b      	b.n	8000a58 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000a40:	6a3a      	ldr	r2, [r7, #32]
 8000a42:	4613      	mov	r3, r2
 8000a44:	009b      	lsls	r3, r3, #2
 8000a46:	4413      	add	r3, r2
 8000a48:	009a      	lsls	r2, r3, #2
 8000a4a:	441a      	add	r2, r3
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	681b      	ldr	r3, [r3, #0]
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a56:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000a58:	69fb      	ldr	r3, [r7, #28]
 8000a5a:	4a1c      	ldr	r2, [pc, #112]	; (8000acc <USART_Init+0x170>)
 8000a5c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a60:	095b      	lsrs	r3, r3, #5
 8000a62:	011b      	lsls	r3, r3, #4
 8000a64:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a68:	091b      	lsrs	r3, r3, #4
 8000a6a:	2264      	movs	r2, #100	; 0x64
 8000a6c:	fb02 f303 	mul.w	r3, r2, r3
 8000a70:	69fa      	ldr	r2, [r7, #28]
 8000a72:	1ad3      	subs	r3, r2, r3
 8000a74:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	899b      	ldrh	r3, [r3, #12]
 8000a7a:	b29b      	uxth	r3, r3
 8000a7c:	b21b      	sxth	r3, r3
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	da0c      	bge.n	8000a9c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000a82:	69bb      	ldr	r3, [r7, #24]
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	3332      	adds	r3, #50	; 0x32
 8000a88:	4a10      	ldr	r2, [pc, #64]	; (8000acc <USART_Init+0x170>)
 8000a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a8e:	095b      	lsrs	r3, r3, #5
 8000a90:	f003 0307 	and.w	r3, r3, #7
 8000a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a96:	4313      	orrs	r3, r2
 8000a98:	627b      	str	r3, [r7, #36]	; 0x24
 8000a9a:	e00b      	b.n	8000ab4 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	011b      	lsls	r3, r3, #4
 8000aa0:	3332      	adds	r3, #50	; 0x32
 8000aa2:	4a0a      	ldr	r2, [pc, #40]	; (8000acc <USART_Init+0x170>)
 8000aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8000aa8:	095b      	lsrs	r3, r3, #5
 8000aaa:	f003 030f 	and.w	r3, r3, #15
 8000aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000ab0:	4313      	orrs	r3, r2
 8000ab2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ab6:	b29a      	uxth	r2, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	811a      	strh	r2, [r3, #8]
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40011000 	.word	0x40011000
 8000ac8:	40011400 	.word	0x40011400
 8000acc:	51eb851f 	.word	0x51eb851f

08000ad0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
 8000ad8:	460b      	mov	r3, r1
 8000ada:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000adc:	78fb      	ldrb	r3, [r7, #3]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d008      	beq.n	8000af4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	899b      	ldrh	r3, [r3, #12]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000aec:	b29a      	uxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000af2:	e007      	b.n	8000b04 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	899b      	ldrh	r3, [r3, #12]
 8000af8:	b29b      	uxth	r3, r3
 8000afa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	819a      	strh	r2, [r3, #12]
}
 8000b04:	bf00      	nop
 8000b06:	370c      	adds	r7, #12
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	f103 0208 	add.w	r2, r3, #8
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	f04f 32ff 	mov.w	r2, #4294967295
 8000b28:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f103 0208 	add.w	r2, r3, #8
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	f103 0208 	add.w	r2, r3, #8
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	2200      	movs	r2, #0
 8000b42:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4e:	4770      	bx	lr

08000b50 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000b50:	b480      	push	{r7}
 8000b52:	b083      	sub	sp, #12
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	b085      	sub	sp, #20
 8000b6e:	af00      	add	r7, sp, #0
 8000b70:	6078      	str	r0, [r7, #4]
 8000b72:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	685b      	ldr	r3, [r3, #4]
 8000b78:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000b7a:	683b      	ldr	r3, [r7, #0]
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	689a      	ldr	r2, [r3, #8]
 8000b84:	683b      	ldr	r3, [r7, #0]
 8000b86:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	683a      	ldr	r2, [r7, #0]
 8000b8e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000b90:	68fb      	ldr	r3, [r7, #12]
 8000b92:	683a      	ldr	r2, [r7, #0]
 8000b94:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	687a      	ldr	r2, [r7, #4]
 8000b9a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	1c5a      	adds	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	601a      	str	r2, [r3, #0]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr

08000bb2 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	b085      	sub	sp, #20
 8000bb6:	af00      	add	r7, sp, #0
 8000bb8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	691b      	ldr	r3, [r3, #16]
 8000bbe:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	687a      	ldr	r2, [r7, #4]
 8000bc6:	6892      	ldr	r2, [r2, #8]
 8000bc8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000bca:	687b      	ldr	r3, [r7, #4]
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	687a      	ldr	r2, [r7, #4]
 8000bd0:	6852      	ldr	r2, [r2, #4]
 8000bd2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	429a      	cmp	r2, r3
 8000bdc:	d103      	bne.n	8000be6 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000bec:	68fb      	ldr	r3, [r7, #12]
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	1e5a      	subs	r2, r3, #1
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	681b      	ldr	r3, [r3, #0]
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	3714      	adds	r7, #20
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b08c      	sub	sp, #48	; 0x30
 8000c0a:	af04      	add	r7, sp, #16
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	603b      	str	r3, [r7, #0]
 8000c12:	4613      	mov	r3, r2
 8000c14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8000c16:	88fb      	ldrh	r3, [r7, #6]
 8000c18:	009b      	lsls	r3, r3, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f000 fdf2 	bl	8001804 <pvPortMalloc>
 8000c20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d00e      	beq.n	8000c46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8000c28:	2058      	movs	r0, #88	; 0x58
 8000c2a:	f000 fdeb 	bl	8001804 <pvPortMalloc>
 8000c2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8000c30:	69fb      	ldr	r3, [r7, #28]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d003      	beq.n	8000c3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8000c36:	69fb      	ldr	r3, [r7, #28]
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8000c3c:	e005      	b.n	8000c4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8000c3e:	6978      	ldr	r0, [r7, #20]
 8000c40:	f000 fea2 	bl	8001988 <vPortFree>
 8000c44:	e001      	b.n	8000c4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8000c4a:	69fb      	ldr	r3, [r7, #28]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d013      	beq.n	8000c78 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8000c50:	88fa      	ldrh	r2, [r7, #6]
 8000c52:	2300      	movs	r3, #0
 8000c54:	9303      	str	r3, [sp, #12]
 8000c56:	69fb      	ldr	r3, [r7, #28]
 8000c58:	9302      	str	r3, [sp, #8]
 8000c5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c5c:	9301      	str	r3, [sp, #4]
 8000c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c60:	9300      	str	r3, [sp, #0]
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	68b9      	ldr	r1, [r7, #8]
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f000 f80e 	bl	8000c88 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8000c6c:	69f8      	ldr	r0, [r7, #28]
 8000c6e:	f000 f89f 	bl	8000db0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8000c72:	2301      	movs	r3, #1
 8000c74:	61bb      	str	r3, [r7, #24]
 8000c76:	e002      	b.n	8000c7e <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8000c78:	f04f 33ff 	mov.w	r3, #4294967295
 8000c7c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8000c7e:	69bb      	ldr	r3, [r7, #24]
	}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3720      	adds	r7, #32
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b088      	sub	sp, #32
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	60f8      	str	r0, [r7, #12]
 8000c90:	60b9      	str	r1, [r7, #8]
 8000c92:	607a      	str	r2, [r7, #4]
 8000c94:	603b      	str	r3, [r7, #0]
			xRunPrivileged = pdFALSE;
		}
		uxPriority &= ~portPRIVILEGE_BIT;
	#endif /* portUSING_MPU_WRAPPERS == 1 */

	configASSERT( pcName );
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d109      	bne.n	8000cb0 <prvInitialiseNewTask+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ca0:	f383 8811 	msr	BASEPRI, r3
 8000ca4:	f3bf 8f6f 	isb	sy
 8000ca8:	f3bf 8f4f 	dsb	sy
 8000cac:	617b      	str	r3, [r7, #20]
 8000cae:	e7fe      	b.n	8000cae <prvInitialiseNewTask+0x26>

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8000cb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cb2:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	009b      	lsls	r3, r3, #2
 8000cb8:	461a      	mov	r2, r3
 8000cba:	21a5      	movs	r1, #165	; 0xa5
 8000cbc:	f000 ff9c 	bl	8001bf8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8000cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cc2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	009b      	lsls	r3, r3, #2
 8000cce:	4413      	add	r3, r2
 8000cd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8000cd2:	69bb      	ldr	r3, [r7, #24]
 8000cd4:	f023 0307 	bic.w	r3, r3, #7
 8000cd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8000cda:	69bb      	ldr	r3, [r7, #24]
 8000cdc:	f003 0307 	and.w	r3, r3, #7
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d009      	beq.n	8000cf8 <prvInitialiseNewTask+0x70>
 8000ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ce8:	f383 8811 	msr	BASEPRI, r3
 8000cec:	f3bf 8f6f 	isb	sy
 8000cf0:	f3bf 8f4f 	dsb	sy
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	e7fe      	b.n	8000cf6 <prvInitialiseNewTask+0x6e>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	e012      	b.n	8000d24 <prvInitialiseNewTask+0x9c>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8000cfe:	68ba      	ldr	r2, [r7, #8]
 8000d00:	69fb      	ldr	r3, [r7, #28]
 8000d02:	4413      	add	r3, r2
 8000d04:	7819      	ldrb	r1, [r3, #0]
 8000d06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d08:	69fb      	ldr	r3, [r7, #28]
 8000d0a:	4413      	add	r3, r2
 8000d0c:	3334      	adds	r3, #52	; 0x34
 8000d0e:	460a      	mov	r2, r1
 8000d10:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == ( char ) 0x00 )
 8000d12:	68ba      	ldr	r2, [r7, #8]
 8000d14:	69fb      	ldr	r3, [r7, #28]
 8000d16:	4413      	add	r3, r2
 8000d18:	781b      	ldrb	r3, [r3, #0]
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d006      	beq.n	8000d2c <prvInitialiseNewTask+0xa4>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	3301      	adds	r3, #1
 8000d22:	61fb      	str	r3, [r7, #28]
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	2b09      	cmp	r3, #9
 8000d28:	d9e9      	bls.n	8000cfe <prvInitialiseNewTask+0x76>
 8000d2a:	e000      	b.n	8000d2e <prvInitialiseNewTask+0xa6>
		{
			break;
 8000d2c:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8000d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d30:	2200      	movs	r2, #0
 8000d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8000d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d38:	2b04      	cmp	r3, #4
 8000d3a:	d901      	bls.n	8000d40 <prvInitialiseNewTask+0xb8>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8000d3c:	2304      	movs	r3, #4
 8000d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8000d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8000d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000d4a:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 8000d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4e:	2200      	movs	r2, #0
 8000d50:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8000d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d54:	3304      	adds	r3, #4
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fefa 	bl	8000b50 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5e:	3318      	adds	r3, #24
 8000d60:	4618      	mov	r0, r3
 8000d62:	f7ff fef5 	bl	8000b50 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8000d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d6e:	f1c3 0205 	rsb	r2, r3, #5
 8000d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8000d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8000d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d7e:	2200      	movs	r2, #0
 8000d80:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8000d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d84:	2200      	movs	r2, #0
 8000d86:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8000d8a:	683a      	ldr	r2, [r7, #0]
 8000d8c:	68f9      	ldr	r1, [r7, #12]
 8000d8e:	69b8      	ldr	r0, [r7, #24]
 8000d90:	f000 fb32 	bl	80013f8 <pxPortInitialiseStack>
 8000d94:	4602      	mov	r2, r0
 8000d96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d98:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8000d9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d002      	beq.n	8000da6 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8000da0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000da4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000da6:	bf00      	nop
 8000da8:	3720      	adds	r7, #32
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
	...

08000db0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b082      	sub	sp, #8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8000db8:	f000 fc48 	bl	800164c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	; (8000e70 <prvAddNewTaskToReadyList+0xc0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	3301      	adds	r3, #1
 8000dc2:	4a2b      	ldr	r2, [pc, #172]	; (8000e70 <prvAddNewTaskToReadyList+0xc0>)
 8000dc4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8000dc6:	4b2b      	ldr	r3, [pc, #172]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d109      	bne.n	8000de2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8000dce:	4a29      	ldr	r2, [pc, #164]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <prvAddNewTaskToReadyList+0xc0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b01      	cmp	r3, #1
 8000dda:	d110      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8000ddc:	f000 fa70 	bl	80012c0 <prvInitialiseTaskLists>
 8000de0:	e00d      	b.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8000de2:	4b25      	ldr	r3, [pc, #148]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d109      	bne.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8000dea:	4b22      	ldr	r3, [pc, #136]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000df4:	429a      	cmp	r2, r3
 8000df6:	d802      	bhi.n	8000dfe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8000df8:	4a1e      	ldr	r2, [pc, #120]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8000dfe:	4b1f      	ldr	r3, [pc, #124]	; (8000e7c <prvAddNewTaskToReadyList+0xcc>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a1d      	ldr	r2, [pc, #116]	; (8000e7c <prvAddNewTaskToReadyList+0xcc>)
 8000e06:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8000e08:	4b1c      	ldr	r3, [pc, #112]	; (8000e7c <prvAddNewTaskToReadyList+0xcc>)
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e14:	2201      	movs	r2, #1
 8000e16:	409a      	lsls	r2, r3
 8000e18:	4b19      	ldr	r3, [pc, #100]	; (8000e80 <prvAddNewTaskToReadyList+0xd0>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4313      	orrs	r3, r2
 8000e1e:	4a18      	ldr	r2, [pc, #96]	; (8000e80 <prvAddNewTaskToReadyList+0xd0>)
 8000e20:	6013      	str	r3, [r2, #0]
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e26:	4613      	mov	r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	4413      	add	r3, r2
 8000e2c:	009b      	lsls	r3, r3, #2
 8000e2e:	4a15      	ldr	r2, [pc, #84]	; (8000e84 <prvAddNewTaskToReadyList+0xd4>)
 8000e30:	441a      	add	r2, r3
 8000e32:	687b      	ldr	r3, [r7, #4]
 8000e34:	3304      	adds	r3, #4
 8000e36:	4619      	mov	r1, r3
 8000e38:	4610      	mov	r0, r2
 8000e3a:	f7ff fe96 	bl	8000b6a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8000e3e:	f000 fc33 	bl	80016a8 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8000e42:	4b0d      	ldr	r3, [pc, #52]	; (8000e78 <prvAddNewTaskToReadyList+0xc8>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d00e      	beq.n	8000e68 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <prvAddNewTaskToReadyList+0xc4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8000e58:	4b0b      	ldr	r3, [pc, #44]	; (8000e88 <prvAddNewTaskToReadyList+0xd8>)
 8000e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	f3bf 8f4f 	dsb	sy
 8000e64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8000e68:	bf00      	nop
 8000e6a:	3708      	adds	r7, #8
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000110 	.word	0x20000110
 8000e74:	20000038 	.word	0x20000038
 8000e78:	2000011c 	.word	0x2000011c
 8000e7c:	2000012c 	.word	0x2000012c
 8000e80:	20000118 	.word	0x20000118
 8000e84:	2000003c 	.word	0x2000003c
 8000e88:	e000ed04 	.word	0xe000ed04

08000e8c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8000e92:	4b1b      	ldr	r3, [pc, #108]	; (8000f00 <vTaskStartScheduler+0x74>)
 8000e94:	9301      	str	r3, [sp, #4]
 8000e96:	2300      	movs	r3, #0
 8000e98:	9300      	str	r3, [sp, #0]
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	2282      	movs	r2, #130	; 0x82
 8000e9e:	4919      	ldr	r1, [pc, #100]	; (8000f04 <vTaskStartScheduler+0x78>)
 8000ea0:	4819      	ldr	r0, [pc, #100]	; (8000f08 <vTaskStartScheduler+0x7c>)
 8000ea2:	f7ff feb0 	bl	8000c06 <xTaskCreate>
 8000ea6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	2b01      	cmp	r3, #1
 8000eac:	d115      	bne.n	8000eda <vTaskStartScheduler+0x4e>
 8000eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000eb2:	f383 8811 	msr	BASEPRI, r3
 8000eb6:	f3bf 8f6f 	isb	sy
 8000eba:	f3bf 8f4f 	dsb	sy
 8000ebe:	60bb      	str	r3, [r7, #8]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8000ec0:	4b12      	ldr	r3, [pc, #72]	; (8000f0c <vTaskStartScheduler+0x80>)
 8000ec2:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <vTaskStartScheduler+0x84>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8000ece:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <vTaskStartScheduler+0x88>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8000ed4:	f000 fb1c 	bl	8001510 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8000ed8:	e00d      	b.n	8000ef6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d109      	bne.n	8000ef6 <vTaskStartScheduler+0x6a>
 8000ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ee6:	f383 8811 	msr	BASEPRI, r3
 8000eea:	f3bf 8f6f 	isb	sy
 8000eee:	f3bf 8f4f 	dsb	sy
 8000ef2:	607b      	str	r3, [r7, #4]
 8000ef4:	e7fe      	b.n	8000ef4 <vTaskStartScheduler+0x68>
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000134 	.word	0x20000134
 8000f04:	08001c38 	.word	0x08001c38
 8000f08:	08001291 	.word	0x08001291
 8000f0c:	20000130 	.word	0x20000130
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	20000114 	.word	0x20000114

08000f18 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <vTaskSuspendAll+0x18>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	3301      	adds	r3, #1
 8000f22:	4a03      	ldr	r2, [pc, #12]	; (8000f30 <vTaskSuspendAll+0x18>)
 8000f24:	6013      	str	r3, [r2, #0]
}
 8000f26:	bf00      	nop
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	20000138 	.word	0x20000138

08000f34 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8000f42:	4b41      	ldr	r3, [pc, #260]	; (8001048 <xTaskResumeAll+0x114>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d109      	bne.n	8000f5e <xTaskResumeAll+0x2a>
 8000f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f4e:	f383 8811 	msr	BASEPRI, r3
 8000f52:	f3bf 8f6f 	isb	sy
 8000f56:	f3bf 8f4f 	dsb	sy
 8000f5a:	603b      	str	r3, [r7, #0]
 8000f5c:	e7fe      	b.n	8000f5c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8000f5e:	f000 fb75 	bl	800164c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8000f62:	4b39      	ldr	r3, [pc, #228]	; (8001048 <xTaskResumeAll+0x114>)
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	4a37      	ldr	r2, [pc, #220]	; (8001048 <xTaskResumeAll+0x114>)
 8000f6a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8000f6c:	4b36      	ldr	r3, [pc, #216]	; (8001048 <xTaskResumeAll+0x114>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d161      	bne.n	8001038 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8000f74:	4b35      	ldr	r3, [pc, #212]	; (800104c <xTaskResumeAll+0x118>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d05d      	beq.n	8001038 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000f7c:	e02e      	b.n	8000fdc <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8000f7e:	4b34      	ldr	r3, [pc, #208]	; (8001050 <xTaskResumeAll+0x11c>)
 8000f80:	68db      	ldr	r3, [r3, #12]
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	3318      	adds	r3, #24
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff fe11 	bl	8000bb2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	3304      	adds	r3, #4
 8000f94:	4618      	mov	r0, r3
 8000f96:	f7ff fe0c 	bl	8000bb2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	409a      	lsls	r2, r3
 8000fa2:	4b2c      	ldr	r3, [pc, #176]	; (8001054 <xTaskResumeAll+0x120>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	4a2a      	ldr	r2, [pc, #168]	; (8001054 <xTaskResumeAll+0x120>)
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	68fb      	ldr	r3, [r7, #12]
 8000fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	009b      	lsls	r3, r3, #2
 8000fb4:	4413      	add	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4a27      	ldr	r2, [pc, #156]	; (8001058 <xTaskResumeAll+0x124>)
 8000fba:	441a      	add	r2, r3
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	3304      	adds	r3, #4
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4610      	mov	r0, r2
 8000fc4:	f7ff fdd1 	bl	8000b6a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fcc:	4b23      	ldr	r3, [pc, #140]	; (800105c <xTaskResumeAll+0x128>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d302      	bcc.n	8000fdc <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <xTaskResumeAll+0x12c>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8000fdc:	4b1c      	ldr	r3, [pc, #112]	; (8001050 <xTaskResumeAll+0x11c>)
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d1cc      	bne.n	8000f7e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8000fea:	f000 f9e5 	bl	80013b8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8000fee:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <xTaskResumeAll+0x130>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d010      	beq.n	800101c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8000ffa:	f000 f837 	bl	800106c <xTaskIncrementTick>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d002      	beq.n	800100a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8001004:	4b16      	ldr	r3, [pc, #88]	; (8001060 <xTaskResumeAll+0x12c>)
 8001006:	2201      	movs	r2, #1
 8001008:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3b01      	subs	r3, #1
 800100e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d1f1      	bne.n	8000ffa <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8001016:	4b13      	ldr	r3, [pc, #76]	; (8001064 <xTaskResumeAll+0x130>)
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800101c:	4b10      	ldr	r3, [pc, #64]	; (8001060 <xTaskResumeAll+0x12c>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b00      	cmp	r3, #0
 8001022:	d009      	beq.n	8001038 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8001024:	2301      	movs	r3, #1
 8001026:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <xTaskResumeAll+0x134>)
 800102a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	f3bf 8f4f 	dsb	sy
 8001034:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001038:	f000 fb36 	bl	80016a8 <vPortExitCritical>

	return xAlreadyYielded;
 800103c:	68bb      	ldr	r3, [r7, #8]
}
 800103e:	4618      	mov	r0, r3
 8001040:	3710      	adds	r7, #16
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	20000138 	.word	0x20000138
 800104c:	20000110 	.word	0x20000110
 8001050:	200000d0 	.word	0x200000d0
 8001054:	20000118 	.word	0x20000118
 8001058:	2000003c 	.word	0x2000003c
 800105c:	20000038 	.word	0x20000038
 8001060:	20000124 	.word	0x20000124
 8001064:	20000120 	.word	0x20000120
 8001068:	e000ed04 	.word	0xe000ed04

0800106c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001072:	2300      	movs	r3, #0
 8001074:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001076:	4b4e      	ldr	r3, [pc, #312]	; (80011b0 <xTaskIncrementTick+0x144>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2b00      	cmp	r3, #0
 800107c:	f040 8087 	bne.w	800118e <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001080:	4b4c      	ldr	r3, [pc, #304]	; (80011b4 <xTaskIncrementTick+0x148>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	3301      	adds	r3, #1
 8001086:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001088:	4a4a      	ldr	r2, [pc, #296]	; (80011b4 <xTaskIncrementTick+0x148>)
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800108e:	693b      	ldr	r3, [r7, #16]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d11f      	bne.n	80010d4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001094:	4b48      	ldr	r3, [pc, #288]	; (80011b8 <xTaskIncrementTick+0x14c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d009      	beq.n	80010b2 <xTaskIncrementTick+0x46>
 800109e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010a2:	f383 8811 	msr	BASEPRI, r3
 80010a6:	f3bf 8f6f 	isb	sy
 80010aa:	f3bf 8f4f 	dsb	sy
 80010ae:	603b      	str	r3, [r7, #0]
 80010b0:	e7fe      	b.n	80010b0 <xTaskIncrementTick+0x44>
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <xTaskIncrementTick+0x14c>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	4b40      	ldr	r3, [pc, #256]	; (80011bc <xTaskIncrementTick+0x150>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	4a3e      	ldr	r2, [pc, #248]	; (80011b8 <xTaskIncrementTick+0x14c>)
 80010be:	6013      	str	r3, [r2, #0]
 80010c0:	4a3e      	ldr	r2, [pc, #248]	; (80011bc <xTaskIncrementTick+0x150>)
 80010c2:	68fb      	ldr	r3, [r7, #12]
 80010c4:	6013      	str	r3, [r2, #0]
 80010c6:	4b3e      	ldr	r3, [pc, #248]	; (80011c0 <xTaskIncrementTick+0x154>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	3301      	adds	r3, #1
 80010cc:	4a3c      	ldr	r2, [pc, #240]	; (80011c0 <xTaskIncrementTick+0x154>)
 80010ce:	6013      	str	r3, [r2, #0]
 80010d0:	f000 f972 	bl	80013b8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80010d4:	4b3b      	ldr	r3, [pc, #236]	; (80011c4 <xTaskIncrementTick+0x158>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	693a      	ldr	r2, [r7, #16]
 80010da:	429a      	cmp	r2, r3
 80010dc:	d348      	bcc.n	8001170 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80010de:	4b36      	ldr	r3, [pc, #216]	; (80011b8 <xTaskIncrementTick+0x14c>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d104      	bne.n	80010f2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <xTaskIncrementTick+0x158>)
 80010ea:	f04f 32ff 	mov.w	r2, #4294967295
 80010ee:	601a      	str	r2, [r3, #0]
					break;
 80010f0:	e03e      	b.n	8001170 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80010f2:	4b31      	ldr	r3, [pc, #196]	; (80011b8 <xTaskIncrementTick+0x14c>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	68db      	ldr	r3, [r3, #12]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8001102:	693a      	ldr	r2, [r7, #16]
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	429a      	cmp	r2, r3
 8001108:	d203      	bcs.n	8001112 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800110a:	4a2e      	ldr	r2, [pc, #184]	; (80011c4 <xTaskIncrementTick+0x158>)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8001110:	e02e      	b.n	8001170 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3304      	adds	r3, #4
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff fd4b 	bl	8000bb2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001120:	2b00      	cmp	r3, #0
 8001122:	d004      	beq.n	800112e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	3318      	adds	r3, #24
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fd42 	bl	8000bb2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800112e:	68bb      	ldr	r3, [r7, #8]
 8001130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001132:	2201      	movs	r2, #1
 8001134:	409a      	lsls	r2, r3
 8001136:	4b24      	ldr	r3, [pc, #144]	; (80011c8 <xTaskIncrementTick+0x15c>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4313      	orrs	r3, r2
 800113c:	4a22      	ldr	r2, [pc, #136]	; (80011c8 <xTaskIncrementTick+0x15c>)
 800113e:	6013      	str	r3, [r2, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001144:	4613      	mov	r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	4a1f      	ldr	r2, [pc, #124]	; (80011cc <xTaskIncrementTick+0x160>)
 800114e:	441a      	add	r2, r3
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	3304      	adds	r3, #4
 8001154:	4619      	mov	r1, r3
 8001156:	4610      	mov	r0, r2
 8001158:	f7ff fd07 	bl	8000b6a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800115c:	68bb      	ldr	r3, [r7, #8]
 800115e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001160:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <xTaskIncrementTick+0x164>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001166:	429a      	cmp	r2, r3
 8001168:	d3b9      	bcc.n	80010de <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800116a:	2301      	movs	r3, #1
 800116c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800116e:	e7b6      	b.n	80010de <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <xTaskIncrementTick+0x164>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001176:	4915      	ldr	r1, [pc, #84]	; (80011cc <xTaskIncrementTick+0x160>)
 8001178:	4613      	mov	r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	4413      	add	r3, r2
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	440b      	add	r3, r1
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	2b01      	cmp	r3, #1
 8001186:	d907      	bls.n	8001198 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8001188:	2301      	movs	r3, #1
 800118a:	617b      	str	r3, [r7, #20]
 800118c:	e004      	b.n	8001198 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <xTaskIncrementTick+0x168>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	3301      	adds	r3, #1
 8001194:	4a0f      	ldr	r2, [pc, #60]	; (80011d4 <xTaskIncrementTick+0x168>)
 8001196:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <xTaskIncrementTick+0x16c>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 80011a0:	2301      	movs	r3, #1
 80011a2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80011a4:	697b      	ldr	r3, [r7, #20]
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	3718      	adds	r7, #24
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000138 	.word	0x20000138
 80011b4:	20000114 	.word	0x20000114
 80011b8:	200000c8 	.word	0x200000c8
 80011bc:	200000cc 	.word	0x200000cc
 80011c0:	20000128 	.word	0x20000128
 80011c4:	20000130 	.word	0x20000130
 80011c8:	20000118 	.word	0x20000118
 80011cc:	2000003c 	.word	0x2000003c
 80011d0:	20000038 	.word	0x20000038
 80011d4:	20000120 	.word	0x20000120
 80011d8:	20000124 	.word	0x20000124

080011dc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80011dc:	b480      	push	{r7}
 80011de:	b087      	sub	sp, #28
 80011e0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80011e2:	4b26      	ldr	r3, [pc, #152]	; (800127c <vTaskSwitchContext+0xa0>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80011ea:	4b25      	ldr	r3, [pc, #148]	; (8001280 <vTaskSwitchContext+0xa4>)
 80011ec:	2201      	movs	r2, #1
 80011ee:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80011f0:	e03e      	b.n	8001270 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80011f2:	4b23      	ldr	r3, [pc, #140]	; (8001280 <vTaskSwitchContext+0xa4>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80011f8:	4b22      	ldr	r3, [pc, #136]	; (8001284 <vTaskSwitchContext+0xa8>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80011fe:	68fb      	ldr	r3, [r7, #12]
 8001200:	fab3 f383 	clz	r3, r3
 8001204:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001206:	7afb      	ldrb	r3, [r7, #11]
 8001208:	f1c3 031f 	rsb	r3, r3, #31
 800120c:	617b      	str	r3, [r7, #20]
 800120e:	491e      	ldr	r1, [pc, #120]	; (8001288 <vTaskSwitchContext+0xac>)
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	4613      	mov	r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	4413      	add	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	440b      	add	r3, r1
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d109      	bne.n	8001236 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001222:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001226:	f383 8811 	msr	BASEPRI, r3
 800122a:	f3bf 8f6f 	isb	sy
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	607b      	str	r3, [r7, #4]
 8001234:	e7fe      	b.n	8001234 <vTaskSwitchContext+0x58>
 8001236:	697a      	ldr	r2, [r7, #20]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	009b      	lsls	r3, r3, #2
 8001240:	4a11      	ldr	r2, [pc, #68]	; (8001288 <vTaskSwitchContext+0xac>)
 8001242:	4413      	add	r3, r2
 8001244:	613b      	str	r3, [r7, #16]
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	685a      	ldr	r2, [r3, #4]
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	605a      	str	r2, [r3, #4]
 8001250:	693b      	ldr	r3, [r7, #16]
 8001252:	685a      	ldr	r2, [r3, #4]
 8001254:	693b      	ldr	r3, [r7, #16]
 8001256:	3308      	adds	r3, #8
 8001258:	429a      	cmp	r2, r3
 800125a:	d104      	bne.n	8001266 <vTaskSwitchContext+0x8a>
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	605a      	str	r2, [r3, #4]
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	4a07      	ldr	r2, [pc, #28]	; (800128c <vTaskSwitchContext+0xb0>)
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	371c      	adds	r7, #28
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr
 800127c:	20000138 	.word	0x20000138
 8001280:	20000124 	.word	0x20000124
 8001284:	20000118 	.word	0x20000118
 8001288:	2000003c 	.word	0x2000003c
 800128c:	20000038 	.word	0x20000038

08001290 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001298:	f000 f852 	bl	8001340 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <prvIdleTask+0x28>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	d9f9      	bls.n	8001298 <prvIdleTask+0x8>
			{
				taskYIELD();
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <prvIdleTask+0x2c>)
 80012a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80012aa:	601a      	str	r2, [r3, #0]
 80012ac:	f3bf 8f4f 	dsb	sy
 80012b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80012b4:	e7f0      	b.n	8001298 <prvIdleTask+0x8>
 80012b6:	bf00      	nop
 80012b8:	2000003c 	.word	0x2000003c
 80012bc:	e000ed04 	.word	0xe000ed04

080012c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	e00c      	b.n	80012e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	4613      	mov	r3, r2
 80012d0:	009b      	lsls	r3, r3, #2
 80012d2:	4413      	add	r3, r2
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	4a12      	ldr	r2, [pc, #72]	; (8001320 <prvInitialiseTaskLists+0x60>)
 80012d8:	4413      	add	r3, r2
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff fc18 	bl	8000b10 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	3301      	adds	r3, #1
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	2b04      	cmp	r3, #4
 80012ea:	d9ef      	bls.n	80012cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80012ec:	480d      	ldr	r0, [pc, #52]	; (8001324 <prvInitialiseTaskLists+0x64>)
 80012ee:	f7ff fc0f 	bl	8000b10 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <prvInitialiseTaskLists+0x68>)
 80012f4:	f7ff fc0c 	bl	8000b10 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80012f8:	480c      	ldr	r0, [pc, #48]	; (800132c <prvInitialiseTaskLists+0x6c>)
 80012fa:	f7ff fc09 	bl	8000b10 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80012fe:	480c      	ldr	r0, [pc, #48]	; (8001330 <prvInitialiseTaskLists+0x70>)
 8001300:	f7ff fc06 	bl	8000b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001304:	480b      	ldr	r0, [pc, #44]	; (8001334 <prvInitialiseTaskLists+0x74>)
 8001306:	f7ff fc03 	bl	8000b10 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800130a:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <prvInitialiseTaskLists+0x78>)
 800130c:	4a05      	ldr	r2, [pc, #20]	; (8001324 <prvInitialiseTaskLists+0x64>)
 800130e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <prvInitialiseTaskLists+0x7c>)
 8001312:	4a05      	ldr	r2, [pc, #20]	; (8001328 <prvInitialiseTaskLists+0x68>)
 8001314:	601a      	str	r2, [r3, #0]
}
 8001316:	bf00      	nop
 8001318:	3708      	adds	r7, #8
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2000003c 	.word	0x2000003c
 8001324:	200000a0 	.word	0x200000a0
 8001328:	200000b4 	.word	0x200000b4
 800132c:	200000d0 	.word	0x200000d0
 8001330:	200000e4 	.word	0x200000e4
 8001334:	200000fc 	.word	0x200000fc
 8001338:	200000c8 	.word	0x200000c8
 800133c:	200000cc 	.word	0x200000cc

08001340 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001346:	e019      	b.n	800137c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001348:	f000 f980 	bl	800164c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <prvCheckTasksWaitingTermination+0x4c>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	68db      	ldr	r3, [r3, #12]
 8001352:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3304      	adds	r3, #4
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fc2a 	bl	8000bb2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800135e:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <prvCheckTasksWaitingTermination+0x50>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3b01      	subs	r3, #1
 8001364:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <prvCheckTasksWaitingTermination+0x50>)
 8001366:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001368:	4b0a      	ldr	r3, [pc, #40]	; (8001394 <prvCheckTasksWaitingTermination+0x54>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	3b01      	subs	r3, #1
 800136e:	4a09      	ldr	r2, [pc, #36]	; (8001394 <prvCheckTasksWaitingTermination+0x54>)
 8001370:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001372:	f000 f999 	bl	80016a8 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001376:	6878      	ldr	r0, [r7, #4]
 8001378:	f000 f80e 	bl	8001398 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800137c:	4b05      	ldr	r3, [pc, #20]	; (8001394 <prvCheckTasksWaitingTermination+0x54>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d1e1      	bne.n	8001348 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200000e4 	.word	0x200000e4
 8001390:	20000110 	.word	0x20000110
 8001394:	200000f8 	.word	0x200000f8

08001398 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4618      	mov	r0, r3
 80013a6:	f000 faef 	bl	8001988 <vPortFree>
			vPortFree( pxTCB );
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f000 faec 	bl	8001988 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80013b0:	bf00      	nop
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80013be:	4b0c      	ldr	r3, [pc, #48]	; (80013f0 <prvResetNextTaskUnblockTime+0x38>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d104      	bne.n	80013d2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80013c8:	4b0a      	ldr	r3, [pc, #40]	; (80013f4 <prvResetNextTaskUnblockTime+0x3c>)
 80013ca:	f04f 32ff 	mov.w	r2, #4294967295
 80013ce:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80013d0:	e008      	b.n	80013e4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80013d2:	4b07      	ldr	r3, [pc, #28]	; (80013f0 <prvResetNextTaskUnblockTime+0x38>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	68db      	ldr	r3, [r3, #12]
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	4a04      	ldr	r2, [pc, #16]	; (80013f4 <prvResetNextTaskUnblockTime+0x3c>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	370c      	adds	r7, #12
 80013e8:	46bd      	mov	sp, r7
 80013ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ee:	4770      	bx	lr
 80013f0:	200000c8 	.word	0x200000c8
 80013f4:	20000130 	.word	0x20000130

080013f8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80013f8:	b480      	push	{r7}
 80013fa:	b085      	sub	sp, #20
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	60f8      	str	r0, [r7, #12]
 8001400:	60b9      	str	r1, [r7, #8]
 8001402:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	3b04      	subs	r3, #4
 8001408:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001410:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	3b04      	subs	r3, #4
 8001416:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	f023 0201 	bic.w	r2, r3, #1
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	3b04      	subs	r3, #4
 8001426:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8001428:	4a0c      	ldr	r2, [pc, #48]	; (800145c <pxPortInitialiseStack+0x64>)
 800142a:	68fb      	ldr	r3, [r7, #12]
 800142c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3b14      	subs	r3, #20
 8001432:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	3b04      	subs	r3, #4
 800143e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	f06f 0202 	mvn.w	r2, #2
 8001446:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	3b20      	subs	r3, #32
 800144c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800144e:	68fb      	ldr	r3, [r7, #12]
}
 8001450:	4618      	mov	r0, r3
 8001452:	3714      	adds	r7, #20
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr
 800145c:	08001461 	.word	0x08001461

08001460 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8001466:	2300      	movs	r3, #0
 8001468:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800146a:	4b11      	ldr	r3, [pc, #68]	; (80014b0 <prvTaskExitError+0x50>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001472:	d009      	beq.n	8001488 <prvTaskExitError+0x28>
 8001474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001478:	f383 8811 	msr	BASEPRI, r3
 800147c:	f3bf 8f6f 	isb	sy
 8001480:	f3bf 8f4f 	dsb	sy
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	e7fe      	b.n	8001486 <prvTaskExitError+0x26>
 8001488:	f04f 0350 	mov.w	r3, #80	; 0x50
 800148c:	f383 8811 	msr	BASEPRI, r3
 8001490:	f3bf 8f6f 	isb	sy
 8001494:	f3bf 8f4f 	dsb	sy
 8001498:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800149a:	bf00      	nop
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d0fc      	beq.n	800149c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	20000014 	.word	0x20000014
	...

080014c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80014c0:	4b07      	ldr	r3, [pc, #28]	; (80014e0 <pxCurrentTCBConst2>)
 80014c2:	6819      	ldr	r1, [r3, #0]
 80014c4:	6808      	ldr	r0, [r1, #0]
 80014c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80014ca:	f380 8809 	msr	PSP, r0
 80014ce:	f3bf 8f6f 	isb	sy
 80014d2:	f04f 0000 	mov.w	r0, #0
 80014d6:	f380 8811 	msr	BASEPRI, r0
 80014da:	4770      	bx	lr
 80014dc:	f3af 8000 	nop.w

080014e0 <pxCurrentTCBConst2>:
 80014e0:	20000038 	.word	0x20000038
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80014e4:	bf00      	nop
 80014e6:	bf00      	nop

080014e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80014e8:	4808      	ldr	r0, [pc, #32]	; (800150c <prvPortStartFirstTask+0x24>)
 80014ea:	6800      	ldr	r0, [r0, #0]
 80014ec:	6800      	ldr	r0, [r0, #0]
 80014ee:	f380 8808 	msr	MSP, r0
 80014f2:	f04f 0000 	mov.w	r0, #0
 80014f6:	f380 8814 	msr	CONTROL, r0
 80014fa:	b662      	cpsie	i
 80014fc:	b661      	cpsie	f
 80014fe:	f3bf 8f4f 	dsb	sy
 8001502:	f3bf 8f6f 	isb	sy
 8001506:	df00      	svc	0
 8001508:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800150a:	bf00      	nop
 800150c:	e000ed08 	.word	0xe000ed08

08001510 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8001516:	4b44      	ldr	r3, [pc, #272]	; (8001628 <xPortStartScheduler+0x118>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	4a44      	ldr	r2, [pc, #272]	; (800162c <xPortStartScheduler+0x11c>)
 800151c:	4293      	cmp	r3, r2
 800151e:	d109      	bne.n	8001534 <xPortStartScheduler+0x24>
 8001520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001524:	f383 8811 	msr	BASEPRI, r3
 8001528:	f3bf 8f6f 	isb	sy
 800152c:	f3bf 8f4f 	dsb	sy
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	e7fe      	b.n	8001532 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8001534:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <xPortStartScheduler+0x118>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	4a3d      	ldr	r2, [pc, #244]	; (8001630 <xPortStartScheduler+0x120>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d109      	bne.n	8001552 <xPortStartScheduler+0x42>
 800153e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001542:	f383 8811 	msr	BASEPRI, r3
 8001546:	f3bf 8f6f 	isb	sy
 800154a:	f3bf 8f4f 	dsb	sy
 800154e:	60fb      	str	r3, [r7, #12]
 8001550:	e7fe      	b.n	8001550 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8001552:	4b38      	ldr	r3, [pc, #224]	; (8001634 <xPortStartScheduler+0x124>)
 8001554:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	b2db      	uxtb	r3, r3
 800155c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	22ff      	movs	r2, #255	; 0xff
 8001562:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8001564:	697b      	ldr	r3, [r7, #20]
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	b2db      	uxtb	r3, r3
 800156a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800156c:	78fb      	ldrb	r3, [r7, #3]
 800156e:	b2db      	uxtb	r3, r3
 8001570:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001574:	b2da      	uxtb	r2, r3
 8001576:	4b30      	ldr	r3, [pc, #192]	; (8001638 <xPortStartScheduler+0x128>)
 8001578:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <xPortStartScheduler+0x12c>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001580:	e009      	b.n	8001596 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8001582:	4b2e      	ldr	r3, [pc, #184]	; (800163c <xPortStartScheduler+0x12c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	3b01      	subs	r3, #1
 8001588:	4a2c      	ldr	r2, [pc, #176]	; (800163c <xPortStartScheduler+0x12c>)
 800158a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	b2db      	uxtb	r3, r3
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	b2db      	uxtb	r3, r3
 8001594:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8001596:	78fb      	ldrb	r3, [r7, #3]
 8001598:	b2db      	uxtb	r3, r3
 800159a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800159e:	2b80      	cmp	r3, #128	; 0x80
 80015a0:	d0ef      	beq.n	8001582 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80015a2:	4b26      	ldr	r3, [pc, #152]	; (800163c <xPortStartScheduler+0x12c>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f1c3 0307 	rsb	r3, r3, #7
 80015aa:	2b04      	cmp	r3, #4
 80015ac:	d009      	beq.n	80015c2 <xPortStartScheduler+0xb2>
 80015ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80015b2:	f383 8811 	msr	BASEPRI, r3
 80015b6:	f3bf 8f6f 	isb	sy
 80015ba:	f3bf 8f4f 	dsb	sy
 80015be:	60bb      	str	r3, [r7, #8]
 80015c0:	e7fe      	b.n	80015c0 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80015c2:	4b1e      	ldr	r3, [pc, #120]	; (800163c <xPortStartScheduler+0x12c>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	021b      	lsls	r3, r3, #8
 80015c8:	4a1c      	ldr	r2, [pc, #112]	; (800163c <xPortStartScheduler+0x12c>)
 80015ca:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80015cc:	4b1b      	ldr	r3, [pc, #108]	; (800163c <xPortStartScheduler+0x12c>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80015d4:	4a19      	ldr	r2, [pc, #100]	; (800163c <xPortStartScheduler+0x12c>)
 80015d6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	b2da      	uxtb	r2, r3
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80015e0:	4b17      	ldr	r3, [pc, #92]	; (8001640 <xPortStartScheduler+0x130>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a16      	ldr	r2, [pc, #88]	; (8001640 <xPortStartScheduler+0x130>)
 80015e6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015ea:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80015ec:	4b14      	ldr	r3, [pc, #80]	; (8001640 <xPortStartScheduler+0x130>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a13      	ldr	r2, [pc, #76]	; (8001640 <xPortStartScheduler+0x130>)
 80015f2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80015f6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80015f8:	f000 f8d6 	bl	80017a8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80015fc:	4b11      	ldr	r3, [pc, #68]	; (8001644 <xPortStartScheduler+0x134>)
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8001602:	f000 f8f5 	bl	80017f0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8001606:	4b10      	ldr	r3, [pc, #64]	; (8001648 <xPortStartScheduler+0x138>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	4a0f      	ldr	r2, [pc, #60]	; (8001648 <xPortStartScheduler+0x138>)
 800160c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8001610:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8001612:	f7ff ff69 	bl	80014e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8001616:	f7ff fde1 	bl	80011dc <vTaskSwitchContext>
	prvTaskExitError();
 800161a:	f7ff ff21 	bl	8001460 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3718      	adds	r7, #24
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	e000ed00 	.word	0xe000ed00
 800162c:	410fc271 	.word	0x410fc271
 8001630:	410fc270 	.word	0x410fc270
 8001634:	e000e400 	.word	0xe000e400
 8001638:	2000013c 	.word	0x2000013c
 800163c:	20000140 	.word	0x20000140
 8001640:	e000ed20 	.word	0xe000ed20
 8001644:	20000014 	.word	0x20000014
 8001648:	e000ef34 	.word	0xe000ef34

0800164c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001656:	f383 8811 	msr	BASEPRI, r3
 800165a:	f3bf 8f6f 	isb	sy
 800165e:	f3bf 8f4f 	dsb	sy
 8001662:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8001664:	4b0e      	ldr	r3, [pc, #56]	; (80016a0 <vPortEnterCritical+0x54>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	3301      	adds	r3, #1
 800166a:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <vPortEnterCritical+0x54>)
 800166c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <vPortEnterCritical+0x54>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d10e      	bne.n	8001694 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8001676:	4b0b      	ldr	r3, [pc, #44]	; (80016a4 <vPortEnterCritical+0x58>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	b2db      	uxtb	r3, r3
 800167c:	2b00      	cmp	r3, #0
 800167e:	d009      	beq.n	8001694 <vPortEnterCritical+0x48>
 8001680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001684:	f383 8811 	msr	BASEPRI, r3
 8001688:	f3bf 8f6f 	isb	sy
 800168c:	f3bf 8f4f 	dsb	sy
 8001690:	603b      	str	r3, [r7, #0]
 8001692:	e7fe      	b.n	8001692 <vPortEnterCritical+0x46>
	}
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr
 80016a0:	20000014 	.word	0x20000014
 80016a4:	e000ed04 	.word	0xe000ed04

080016a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80016ae:	4b11      	ldr	r3, [pc, #68]	; (80016f4 <vPortExitCritical+0x4c>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d109      	bne.n	80016ca <vPortExitCritical+0x22>
 80016b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80016ba:	f383 8811 	msr	BASEPRI, r3
 80016be:	f3bf 8f6f 	isb	sy
 80016c2:	f3bf 8f4f 	dsb	sy
 80016c6:	607b      	str	r3, [r7, #4]
 80016c8:	e7fe      	b.n	80016c8 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 80016ca:	4b0a      	ldr	r3, [pc, #40]	; (80016f4 <vPortExitCritical+0x4c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	3b01      	subs	r3, #1
 80016d0:	4a08      	ldr	r2, [pc, #32]	; (80016f4 <vPortExitCritical+0x4c>)
 80016d2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80016d4:	4b07      	ldr	r3, [pc, #28]	; (80016f4 <vPortExitCritical+0x4c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d104      	bne.n	80016e6 <vPortExitCritical+0x3e>
 80016dc:	2300      	movs	r3, #0
 80016de:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80016e6:	bf00      	nop
 80016e8:	370c      	adds	r7, #12
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr
 80016f2:	bf00      	nop
 80016f4:	20000014 	.word	0x20000014
	...

08001700 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8001700:	f3ef 8009 	mrs	r0, PSP
 8001704:	f3bf 8f6f 	isb	sy
 8001708:	4b15      	ldr	r3, [pc, #84]	; (8001760 <pxCurrentTCBConst>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	f01e 0f10 	tst.w	lr, #16
 8001710:	bf08      	it	eq
 8001712:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8001716:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800171a:	6010      	str	r0, [r2, #0]
 800171c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8001720:	f04f 0050 	mov.w	r0, #80	; 0x50
 8001724:	f380 8811 	msr	BASEPRI, r0
 8001728:	f3bf 8f4f 	dsb	sy
 800172c:	f3bf 8f6f 	isb	sy
 8001730:	f7ff fd54 	bl	80011dc <vTaskSwitchContext>
 8001734:	f04f 0000 	mov.w	r0, #0
 8001738:	f380 8811 	msr	BASEPRI, r0
 800173c:	bc09      	pop	{r0, r3}
 800173e:	6819      	ldr	r1, [r3, #0]
 8001740:	6808      	ldr	r0, [r1, #0]
 8001742:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001746:	f01e 0f10 	tst.w	lr, #16
 800174a:	bf08      	it	eq
 800174c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8001750:	f380 8809 	msr	PSP, r0
 8001754:	f3bf 8f6f 	isb	sy
 8001758:	4770      	bx	lr
 800175a:	bf00      	nop
 800175c:	f3af 8000 	nop.w

08001760 <pxCurrentTCBConst>:
 8001760:	20000038 	.word	0x20000038
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8001764:	bf00      	nop
 8001766:	bf00      	nop

08001768 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
	__asm volatile
 800176e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001772:	f383 8811 	msr	BASEPRI, r3
 8001776:	f3bf 8f6f 	isb	sy
 800177a:	f3bf 8f4f 	dsb	sy
 800177e:	607b      	str	r3, [r7, #4]
	known. */
	portDISABLE_INTERRUPTS();
  traceISR_ENTER();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8001780:	f7ff fc74 	bl	800106c <xTaskIncrementTick>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <SysTick_Handler+0x2a>
		{
			traceISR_EXIT_TO_SCHEDULER();
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800178a:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <SysTick_Handler+0x3c>)
 800178c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001790:	601a      	str	r2, [r3, #0]
 8001792:	2300      	movs	r3, #0
 8001794:	603b      	str	r3, [r7, #0]
	__asm volatile
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	f383 8811 	msr	BASEPRI, r3
		{
			traceISR_EXIT();
		}
	}
	portENABLE_INTERRUPTS();
}
 800179c:	bf00      	nop
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	e000ed04 	.word	0xe000ed04

080017a8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80017ac:	4b0b      	ldr	r3, [pc, #44]	; (80017dc <vPortSetupTimerInterrupt+0x34>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80017b2:	4b0b      	ldr	r3, [pc, #44]	; (80017e0 <vPortSetupTimerInterrupt+0x38>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80017b8:	4b0a      	ldr	r3, [pc, #40]	; (80017e4 <vPortSetupTimerInterrupt+0x3c>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4a0a      	ldr	r2, [pc, #40]	; (80017e8 <vPortSetupTimerInterrupt+0x40>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	095b      	lsrs	r3, r3, #5
 80017c4:	4a09      	ldr	r2, [pc, #36]	; (80017ec <vPortSetupTimerInterrupt+0x44>)
 80017c6:	3b01      	subs	r3, #1
 80017c8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80017ca:	4b04      	ldr	r3, [pc, #16]	; (80017dc <vPortSetupTimerInterrupt+0x34>)
 80017cc:	2207      	movs	r2, #7
 80017ce:	601a      	str	r2, [r3, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	e000e010 	.word	0xe000e010
 80017e0:	e000e018 	.word	0xe000e018
 80017e4:	20000000 	.word	0x20000000
 80017e8:	10624dd3 	.word	0x10624dd3
 80017ec:	e000e014 	.word	0xe000e014

080017f0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80017f0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8001800 <vPortEnableVFP+0x10>
 80017f4:	6801      	ldr	r1, [r0, #0]
 80017f6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80017fa:	6001      	str	r1, [r0, #0]
 80017fc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80017fe:	bf00      	nop
 8001800:	e000ed88 	.word	0xe000ed88

08001804 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08a      	sub	sp, #40	; 0x28
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800180c:	2300      	movs	r3, #0
 800180e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8001810:	f7ff fb82 	bl	8000f18 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8001814:	4b57      	ldr	r3, [pc, #348]	; (8001974 <pvPortMalloc+0x170>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2b00      	cmp	r3, #0
 800181a:	d101      	bne.n	8001820 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800181c:	f000 f90c 	bl	8001a38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8001820:	4b55      	ldr	r3, [pc, #340]	; (8001978 <pvPortMalloc+0x174>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	4013      	ands	r3, r2
 8001828:	2b00      	cmp	r3, #0
 800182a:	f040 808c 	bne.w	8001946 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2b00      	cmp	r3, #0
 8001832:	d01c      	beq.n	800186e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8001834:	2208      	movs	r2, #8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4413      	add	r3, r2
 800183a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	f003 0307 	and.w	r3, r3, #7
 8001842:	2b00      	cmp	r3, #0
 8001844:	d013      	beq.n	800186e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	f023 0307 	bic.w	r3, r3, #7
 800184c:	3308      	adds	r3, #8
 800184e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	f003 0307 	and.w	r3, r3, #7
 8001856:	2b00      	cmp	r3, #0
 8001858:	d009      	beq.n	800186e <pvPortMalloc+0x6a>
	__asm volatile
 800185a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800185e:	f383 8811 	msr	BASEPRI, r3
 8001862:	f3bf 8f6f 	isb	sy
 8001866:	f3bf 8f4f 	dsb	sy
 800186a:	617b      	str	r3, [r7, #20]
 800186c:	e7fe      	b.n	800186c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d068      	beq.n	8001946 <pvPortMalloc+0x142>
 8001874:	4b41      	ldr	r3, [pc, #260]	; (800197c <pvPortMalloc+0x178>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	687a      	ldr	r2, [r7, #4]
 800187a:	429a      	cmp	r2, r3
 800187c:	d863      	bhi.n	8001946 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800187e:	4b40      	ldr	r3, [pc, #256]	; (8001980 <pvPortMalloc+0x17c>)
 8001880:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8001882:	4b3f      	ldr	r3, [pc, #252]	; (8001980 <pvPortMalloc+0x17c>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001888:	e004      	b.n	8001894 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800188e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8001894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	687a      	ldr	r2, [r7, #4]
 800189a:	429a      	cmp	r2, r3
 800189c:	d903      	bls.n	80018a6 <pvPortMalloc+0xa2>
 800189e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d1f1      	bne.n	800188a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <pvPortMalloc+0x170>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d04a      	beq.n	8001946 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80018b0:	6a3b      	ldr	r3, [r7, #32]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	2208      	movs	r2, #8
 80018b6:	4413      	add	r3, r2
 80018b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	6a3b      	ldr	r3, [r7, #32]
 80018c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80018c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c4:	685a      	ldr	r2, [r3, #4]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	1ad2      	subs	r2, r2, r3
 80018ca:	2308      	movs	r3, #8
 80018cc:	005b      	lsls	r3, r3, #1
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d91e      	bls.n	8001910 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80018d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <pvPortMalloc+0xf4>
 80018e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80018e8:	f383 8811 	msr	BASEPRI, r3
 80018ec:	f3bf 8f6f 	isb	sy
 80018f0:	f3bf 8f4f 	dsb	sy
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	e7fe      	b.n	80018f6 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	1ad2      	subs	r2, r2, r3
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8001904:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001906:	687a      	ldr	r2, [r7, #4]
 8001908:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800190a:	69b8      	ldr	r0, [r7, #24]
 800190c:	f000 f8f6 	bl	8001afc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8001910:	4b1a      	ldr	r3, [pc, #104]	; (800197c <pvPortMalloc+0x178>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	4a18      	ldr	r2, [pc, #96]	; (800197c <pvPortMalloc+0x178>)
 800191c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800191e:	4b17      	ldr	r3, [pc, #92]	; (800197c <pvPortMalloc+0x178>)
 8001920:	681a      	ldr	r2, [r3, #0]
 8001922:	4b18      	ldr	r3, [pc, #96]	; (8001984 <pvPortMalloc+0x180>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	429a      	cmp	r2, r3
 8001928:	d203      	bcs.n	8001932 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800192a:	4b14      	ldr	r3, [pc, #80]	; (800197c <pvPortMalloc+0x178>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a15      	ldr	r2, [pc, #84]	; (8001984 <pvPortMalloc+0x180>)
 8001930:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8001932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <pvPortMalloc+0x174>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8001940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001942:	2200      	movs	r2, #0
 8001944:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8001946:	f7ff faf5 	bl	8000f34 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800194a:	69fb      	ldr	r3, [r7, #28]
 800194c:	f003 0307 	and.w	r3, r3, #7
 8001950:	2b00      	cmp	r3, #0
 8001952:	d009      	beq.n	8001968 <pvPortMalloc+0x164>
 8001954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001958:	f383 8811 	msr	BASEPRI, r3
 800195c:	f3bf 8f6f 	isb	sy
 8001960:	f3bf 8f4f 	dsb	sy
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	e7fe      	b.n	8001966 <pvPortMalloc+0x162>
	return pvReturn;
 8001968:	69fb      	ldr	r3, [r7, #28]
}
 800196a:	4618      	mov	r0, r3
 800196c:	3728      	adds	r7, #40	; 0x28
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20012d4c 	.word	0x20012d4c
 8001978:	20012d58 	.word	0x20012d58
 800197c:	20012d50 	.word	0x20012d50
 8001980:	20012d44 	.word	0x20012d44
 8001984:	20012d54 	.word	0x20012d54

08001988 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b086      	sub	sp, #24
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d046      	beq.n	8001a28 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800199a:	2308      	movs	r3, #8
 800199c:	425b      	negs	r3, r3
 800199e:	697a      	ldr	r2, [r7, #20]
 80019a0:	4413      	add	r3, r2
 80019a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	685a      	ldr	r2, [r3, #4]
 80019ac:	4b20      	ldr	r3, [pc, #128]	; (8001a30 <vPortFree+0xa8>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4013      	ands	r3, r2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d109      	bne.n	80019ca <vPortFree+0x42>
 80019b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019ba:	f383 8811 	msr	BASEPRI, r3
 80019be:	f3bf 8f6f 	isb	sy
 80019c2:	f3bf 8f4f 	dsb	sy
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	e7fe      	b.n	80019c8 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d009      	beq.n	80019e6 <vPortFree+0x5e>
 80019d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80019d6:	f383 8811 	msr	BASEPRI, r3
 80019da:	f3bf 8f6f 	isb	sy
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	e7fe      	b.n	80019e4 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	4b11      	ldr	r3, [pc, #68]	; (8001a30 <vPortFree+0xa8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4013      	ands	r3, r2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d019      	beq.n	8001a28 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80019f4:	693b      	ldr	r3, [r7, #16]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d115      	bne.n	8001a28 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	685a      	ldr	r2, [r3, #4]
 8001a00:	4b0b      	ldr	r3, [pc, #44]	; (8001a30 <vPortFree+0xa8>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	43db      	mvns	r3, r3
 8001a06:	401a      	ands	r2, r3
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8001a0c:	f7ff fa84 	bl	8000f18 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	685a      	ldr	r2, [r3, #4]
 8001a14:	4b07      	ldr	r3, [pc, #28]	; (8001a34 <vPortFree+0xac>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	4413      	add	r3, r2
 8001a1a:	4a06      	ldr	r2, [pc, #24]	; (8001a34 <vPortFree+0xac>)
 8001a1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8001a1e:	6938      	ldr	r0, [r7, #16]
 8001a20:	f000 f86c 	bl	8001afc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8001a24:	f7ff fa86 	bl	8000f34 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8001a28:	bf00      	nop
 8001a2a:	3718      	adds	r7, #24
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	20012d58 	.word	0x20012d58
 8001a34:	20012d50 	.word	0x20012d50

08001a38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8001a3e:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001a42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8001a44:	4b27      	ldr	r3, [pc, #156]	; (8001ae4 <prvHeapInit+0xac>)
 8001a46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	f003 0307 	and.w	r3, r3, #7
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	3307      	adds	r3, #7
 8001a56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	f023 0307 	bic.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	4a1f      	ldr	r2, [pc, #124]	; (8001ae4 <prvHeapInit+0xac>)
 8001a68:	4413      	add	r3, r2
 8001a6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8001a70:	4a1d      	ldr	r2, [pc, #116]	; (8001ae8 <prvHeapInit+0xb0>)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8001a76:	4b1c      	ldr	r3, [pc, #112]	; (8001ae8 <prvHeapInit+0xb0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	68ba      	ldr	r2, [r7, #8]
 8001a80:	4413      	add	r3, r2
 8001a82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8001a84:	2208      	movs	r2, #8
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	1a9b      	subs	r3, r3, r2
 8001a8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	4a15      	ldr	r2, [pc, #84]	; (8001aec <prvHeapInit+0xb4>)
 8001a98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8001a9a:	4b14      	ldr	r3, [pc, #80]	; (8001aec <prvHeapInit+0xb4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8001aa2:	4b12      	ldr	r3, [pc, #72]	; (8001aec <prvHeapInit+0xb4>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	68fa      	ldr	r2, [r7, #12]
 8001ab2:	1ad2      	subs	r2, r2, r3
 8001ab4:	683b      	ldr	r3, [r7, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8001ab8:	4b0c      	ldr	r3, [pc, #48]	; (8001aec <prvHeapInit+0xb4>)
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4a0a      	ldr	r2, [pc, #40]	; (8001af0 <prvHeapInit+0xb8>)
 8001ac6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	4a09      	ldr	r2, [pc, #36]	; (8001af4 <prvHeapInit+0xbc>)
 8001ace:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8001ad0:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <prvHeapInit+0xc0>)
 8001ad2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001ad6:	601a      	str	r2, [r3, #0]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr
 8001ae4:	20000144 	.word	0x20000144
 8001ae8:	20012d44 	.word	0x20012d44
 8001aec:	20012d4c 	.word	0x20012d4c
 8001af0:	20012d54 	.word	0x20012d54
 8001af4:	20012d50 	.word	0x20012d50
 8001af8:	20012d58 	.word	0x20012d58

08001afc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8001afc:	b480      	push	{r7}
 8001afe:	b085      	sub	sp, #20
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8001b04:	4b28      	ldr	r3, [pc, #160]	; (8001ba8 <prvInsertBlockIntoFreeList+0xac>)
 8001b06:	60fb      	str	r3, [r7, #12]
 8001b08:	e002      	b.n	8001b10 <prvInsertBlockIntoFreeList+0x14>
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	687a      	ldr	r2, [r7, #4]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d8f7      	bhi.n	8001b0a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	68ba      	ldr	r2, [r7, #8]
 8001b24:	4413      	add	r3, r2
 8001b26:	687a      	ldr	r2, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d108      	bne.n	8001b3e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	685a      	ldr	r2, [r3, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	441a      	add	r2, r3
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	68ba      	ldr	r2, [r7, #8]
 8001b48:	441a      	add	r2, r3
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d118      	bne.n	8001b84 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <prvInsertBlockIntoFreeList+0xb0>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d00d      	beq.n	8001b7a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685a      	ldr	r2, [r3, #4]
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	441a      	add	r2, r3
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	e008      	b.n	8001b8c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8001b7a:	4b0c      	ldr	r3, [pc, #48]	; (8001bac <prvInsertBlockIntoFreeList+0xb0>)
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	601a      	str	r2, [r3, #0]
 8001b82:	e003      	b.n	8001b8c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681a      	ldr	r2, [r3, #0]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8001b8c:	68fa      	ldr	r2, [r7, #12]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d002      	beq.n	8001b9a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	687a      	ldr	r2, [r7, #4]
 8001b98:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001b9a:	bf00      	nop
 8001b9c:	3714      	adds	r7, #20
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
 8001ba6:	bf00      	nop
 8001ba8:	20012d44 	.word	0x20012d44
 8001bac:	20012d4c 	.word	0x20012d4c

08001bb0 <__libc_init_array>:
 8001bb0:	b570      	push	{r4, r5, r6, lr}
 8001bb2:	4e0d      	ldr	r6, [pc, #52]	; (8001be8 <__libc_init_array+0x38>)
 8001bb4:	4c0d      	ldr	r4, [pc, #52]	; (8001bec <__libc_init_array+0x3c>)
 8001bb6:	1ba4      	subs	r4, r4, r6
 8001bb8:	10a4      	asrs	r4, r4, #2
 8001bba:	2500      	movs	r5, #0
 8001bbc:	42a5      	cmp	r5, r4
 8001bbe:	d109      	bne.n	8001bd4 <__libc_init_array+0x24>
 8001bc0:	4e0b      	ldr	r6, [pc, #44]	; (8001bf0 <__libc_init_array+0x40>)
 8001bc2:	4c0c      	ldr	r4, [pc, #48]	; (8001bf4 <__libc_init_array+0x44>)
 8001bc4:	f000 f820 	bl	8001c08 <_init>
 8001bc8:	1ba4      	subs	r4, r4, r6
 8001bca:	10a4      	asrs	r4, r4, #2
 8001bcc:	2500      	movs	r5, #0
 8001bce:	42a5      	cmp	r5, r4
 8001bd0:	d105      	bne.n	8001bde <__libc_init_array+0x2e>
 8001bd2:	bd70      	pop	{r4, r5, r6, pc}
 8001bd4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001bd8:	4798      	blx	r3
 8001bda:	3501      	adds	r5, #1
 8001bdc:	e7ee      	b.n	8001bbc <__libc_init_array+0xc>
 8001bde:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001be2:	4798      	blx	r3
 8001be4:	3501      	adds	r5, #1
 8001be6:	e7f2      	b.n	8001bce <__libc_init_array+0x1e>
 8001be8:	08001c50 	.word	0x08001c50
 8001bec:	08001c50 	.word	0x08001c50
 8001bf0:	08001c50 	.word	0x08001c50
 8001bf4:	08001c54 	.word	0x08001c54

08001bf8 <memset>:
 8001bf8:	4402      	add	r2, r0
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d100      	bne.n	8001c02 <memset+0xa>
 8001c00:	4770      	bx	lr
 8001c02:	f803 1b01 	strb.w	r1, [r3], #1
 8001c06:	e7f9      	b.n	8001bfc <memset+0x4>

08001c08 <_init>:
 8001c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c0a:	bf00      	nop
 8001c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c0e:	bc08      	pop	{r3}
 8001c10:	469e      	mov	lr, r3
 8001c12:	4770      	bx	lr

08001c14 <_fini>:
 8001c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c16:	bf00      	nop
 8001c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c1a:	bc08      	pop	{r3}
 8001c1c:	469e      	mov	lr, r3
 8001c1e:	4770      	bx	lr
